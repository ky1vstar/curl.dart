// ignore_for_file: constant_identifier_names

import 'dart:ffi';

import 'package:curl_http/src/curl/bindings.g.dart';
import 'package:curl_http/src/curl/libcurl.dart';
import 'package:ffi/ffi.dart';

// `static const int CURL(E?)_(\w+).*;`
// ->
// `$2(CURLcode.CURL$1_$2),\n`

/// API docs: https://curl.se/libcurl/c/libcurl-errors.html
enum CurlEasyCode {
  OK(CURLcode.CURLE_OK),

  UNSUPPORTED_PROTOCOL(CURLcode.CURLE_UNSUPPORTED_PROTOCOL),

  FAILED_INIT(CURLcode.CURLE_FAILED_INIT),

  URL_MALFORMAT(CURLcode.CURLE_URL_MALFORMAT),

  NOT_BUILT_IN(CURLcode.CURLE_NOT_BUILT_IN),

  COULDNT_RESOLVE_PROXY(CURLcode.CURLE_COULDNT_RESOLVE_PROXY),

  COULDNT_RESOLVE_HOST(CURLcode.CURLE_COULDNT_RESOLVE_HOST),

  COULDNT_CONNECT(CURLcode.CURLE_COULDNT_CONNECT),

  WEIRD_SERVER_REPLY(CURLcode.CURLE_WEIRD_SERVER_REPLY),

  REMOTE_ACCESS_DENIED(CURLcode.CURLE_REMOTE_ACCESS_DENIED),

  FTP_ACCEPT_FAILED(CURLcode.CURLE_FTP_ACCEPT_FAILED),

  FTP_WEIRD_PASS_REPLY(CURLcode.CURLE_FTP_WEIRD_PASS_REPLY),

  FTP_ACCEPT_TIMEOUT(CURLcode.CURLE_FTP_ACCEPT_TIMEOUT),

  FTP_WEIRD_PASV_REPLY(CURLcode.CURLE_FTP_WEIRD_PASV_REPLY),

  FTP_WEIRD_227_FORMAT(CURLcode.CURLE_FTP_WEIRD_227_FORMAT),

  FTP_CANT_GET_HOST(CURLcode.CURLE_FTP_CANT_GET_HOST),

  HTTP2(CURLcode.CURLE_HTTP2),

  FTP_COULDNT_SET_TYPE(CURLcode.CURLE_FTP_COULDNT_SET_TYPE),

  PARTIAL_FILE(CURLcode.CURLE_PARTIAL_FILE),

  FTP_COULDNT_RETR_FILE(CURLcode.CURLE_FTP_COULDNT_RETR_FILE),

  OBSOLETE20(CURLcode.CURLE_OBSOLETE20),

  QUOTE_ERROR(CURLcode.CURLE_QUOTE_ERROR),

  HTTP_RETURNED_ERROR(CURLcode.CURLE_HTTP_RETURNED_ERROR),

  WRITE_ERROR(CURLcode.CURLE_WRITE_ERROR),

  OBSOLETE24(CURLcode.CURLE_OBSOLETE24),

  UPLOAD_FAILED(CURLcode.CURLE_UPLOAD_FAILED),

  READ_ERROR(CURLcode.CURLE_READ_ERROR),

  OUT_OF_MEMORY(CURLcode.CURLE_OUT_OF_MEMORY),

  OPERATION_TIMEDOUT(CURLcode.CURLE_OPERATION_TIMEDOUT),

  OBSOLETE29(CURLcode.CURLE_OBSOLETE29),

  FTP_PORT_FAILED(CURLcode.CURLE_FTP_PORT_FAILED),

  FTP_COULDNT_USE_REST(CURLcode.CURLE_FTP_COULDNT_USE_REST),

  OBSOLETE32(CURLcode.CURLE_OBSOLETE32),

  RANGE_ERROR(CURLcode.CURLE_RANGE_ERROR),

  HTTP_POST_ERROR(CURLcode.CURLE_HTTP_POST_ERROR),

  SSL_CONNECT_ERROR(CURLcode.CURLE_SSL_CONNECT_ERROR),

  BAD_DOWNLOAD_RESUME(CURLcode.CURLE_BAD_DOWNLOAD_RESUME),

  FILE_COULDNT_READ_FILE(CURLcode.CURLE_FILE_COULDNT_READ_FILE),

  LDAP_CANNOT_BIND(CURLcode.CURLE_LDAP_CANNOT_BIND),

  LDAP_SEARCH_FAILED(CURLcode.CURLE_LDAP_SEARCH_FAILED),

  OBSOLETE40(CURLcode.CURLE_OBSOLETE40),

  FUNCTION_NOT_FOUND(CURLcode.CURLE_FUNCTION_NOT_FOUND),

  ABORTED_BY_CALLBACK(CURLcode.CURLE_ABORTED_BY_CALLBACK),

  BAD_FUNCTION_ARGUMENT(CURLcode.CURLE_BAD_FUNCTION_ARGUMENT),

  OBSOLETE44(CURLcode.CURLE_OBSOLETE44),

  INTERFACE_FAILED(CURLcode.CURLE_INTERFACE_FAILED),

  OBSOLETE46(CURLcode.CURLE_OBSOLETE46),

  TOO_MANY_REDIRECTS(CURLcode.CURLE_TOO_MANY_REDIRECTS),

  UNKNOWN_OPTION(CURLcode.CURLE_UNKNOWN_OPTION),

  SETOPT_OPTION_SYNTAX(CURLcode.CURLE_SETOPT_OPTION_SYNTAX),

  OBSOLETE50(CURLcode.CURLE_OBSOLETE50),

  OBSOLETE51(CURLcode.CURLE_OBSOLETE51),

  GOT_NOTHING(CURLcode.CURLE_GOT_NOTHING),

  SSL_ENGINE_NOTFOUND(CURLcode.CURLE_SSL_ENGINE_NOTFOUND),

  SSL_ENGINE_SETFAILED(CURLcode.CURLE_SSL_ENGINE_SETFAILED),

  SEND_ERROR(CURLcode.CURLE_SEND_ERROR),

  RECV_ERROR(CURLcode.CURLE_RECV_ERROR),

  OBSOLETE57(CURLcode.CURLE_OBSOLETE57),

  SSL_CERTPROBLEM(CURLcode.CURLE_SSL_CERTPROBLEM),

  SSL_CIPHER(CURLcode.CURLE_SSL_CIPHER),

  PEER_FAILED_VERIFICATION(CURLcode.CURLE_PEER_FAILED_VERIFICATION),

  BAD_CONTENT_ENCODING(CURLcode.CURLE_BAD_CONTENT_ENCODING),

  OBSOLETE62(CURLcode.CURLE_OBSOLETE62),

  FILESIZE_EXCEEDED(CURLcode.CURLE_FILESIZE_EXCEEDED),

  USE_SSL_FAILED(CURLcode.CURLE_USE_SSL_FAILED),

  SEND_FAIL_REWIND(CURLcode.CURLE_SEND_FAIL_REWIND),

  SSL_ENGINE_INITFAILED(CURLcode.CURLE_SSL_ENGINE_INITFAILED),

  LOGIN_DENIED(CURLcode.CURLE_LOGIN_DENIED),

  TFTP_NOTFOUND(CURLcode.CURLE_TFTP_NOTFOUND),

  TFTP_PERM(CURLcode.CURLE_TFTP_PERM),

  REMOTE_DISK_FULL(CURLcode.CURLE_REMOTE_DISK_FULL),

  TFTP_ILLEGAL(CURLcode.CURLE_TFTP_ILLEGAL),

  TFTP_UNKNOWNID(CURLcode.CURLE_TFTP_UNKNOWNID),

  REMOTE_FILE_EXISTS(CURLcode.CURLE_REMOTE_FILE_EXISTS),

  TFTP_NOSUCHUSER(CURLcode.CURLE_TFTP_NOSUCHUSER),

  OBSOLETE75(CURLcode.CURLE_OBSOLETE75),

  OBSOLETE76(CURLcode.CURLE_OBSOLETE76),

  SSL_CACERT_BADFILE(CURLcode.CURLE_SSL_CACERT_BADFILE),

  REMOTE_FILE_NOT_FOUND(CURLcode.CURLE_REMOTE_FILE_NOT_FOUND),

  SSH(CURLcode.CURLE_SSH),

  SSL_SHUTDOWN_FAILED(CURLcode.CURLE_SSL_SHUTDOWN_FAILED),

  AGAIN(CURLcode.CURLE_AGAIN),

  SSL_CRL_BADFILE(CURLcode.CURLE_SSL_CRL_BADFILE),

  SSL_ISSUER_ERROR(CURLcode.CURLE_SSL_ISSUER_ERROR),

  FTP_PRET_FAILED(CURLcode.CURLE_FTP_PRET_FAILED),

  RTSP_CSEQ_ERROR(CURLcode.CURLE_RTSP_CSEQ_ERROR),

  RTSP_SESSION_ERROR(CURLcode.CURLE_RTSP_SESSION_ERROR),

  FTP_BAD_FILE_LIST(CURLcode.CURLE_FTP_BAD_FILE_LIST),

  CHUNK_FAILED(CURLcode.CURLE_CHUNK_FAILED),

  NO_CONNECTION_AVAILABLE(CURLcode.CURLE_NO_CONNECTION_AVAILABLE),

  SSL_PINNEDPUBKEYNOTMATCH(CURLcode.CURLE_SSL_PINNEDPUBKEYNOTMATCH),

  SSL_INVALIDCERTSTATUS(CURLcode.CURLE_SSL_INVALIDCERTSTATUS),

  HTTP2_STREAM(CURLcode.CURLE_HTTP2_STREAM),

  RECURSIVE_API_CALL(CURLcode.CURLE_RECURSIVE_API_CALL),

  AUTH_ERROR(CURLcode.CURLE_AUTH_ERROR),

  HTTP3(CURLcode.CURLE_HTTP3),

  QUIC_CONNECT_ERROR(CURLcode.CURLE_QUIC_CONNECT_ERROR),

  PROXY(CURLcode.CURLE_PROXY),

  SSL_CLIENTCERT(CURLcode.CURLE_SSL_CLIENTCERT),

  UNRECOVERABLE_POLL(CURLcode.CURLE_UNRECOVERABLE_POLL),

  LAST(CURLcode.CURL_LAST),
  ;

  const CurlEasyCode(this.rawValue);

  factory CurlEasyCode.fromRawValue(int rawValue) {
    return CurlEasyCode.values.firstWhere(
      (element) => element.rawValue == rawValue,
      orElse: () {
        assert(false, "Unknown raw value $rawValue was given to $CurlEasyCode");
        return CurlEasyCode.LAST;
      },
    );
  }

  final int rawValue;

  String? strError() {
    switch (this) {
      case CurlEasyCode.LAST:
        return "Unknown error code";
      default:
        final errorStrPtr = libcurl.curl_easy_strerror(rawValue);
        return errorStrPtr == nullptr ? null : errorStrPtr.cast<Utf8>().toDartString();
    }
  }
}
