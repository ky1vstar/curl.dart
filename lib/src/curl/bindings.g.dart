// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Auto-generated, internal bindings to libcurl
class Bindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Bindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Bindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int curl_strequal(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
  ) {
    return _curl_strequal(
      s1,
      s2,
    );
  }

  late final _curl_strequalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('curl_strequal');
  late final _curl_strequal = _curl_strequalPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int curl_strnequal(
    ffi.Pointer<ffi.Char> s1,
    ffi.Pointer<ffi.Char> s2,
    int n,
  ) {
    return _curl_strnequal(
      s1,
      s2,
      n,
    );
  }

  late final _curl_strnequalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('curl_strnequal');
  late final _curl_strnequal = _curl_strnequalPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<curl_mime> curl_mime_init(
    ffi.Pointer<CURL> easy,
  ) {
    return _curl_mime_init(
      easy,
    );
  }

  late final _curl_mime_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<curl_mime> Function(
              ffi.Pointer<CURL>)>>('curl_mime_init');
  late final _curl_mime_init = _curl_mime_initPtr
      .asFunction<ffi.Pointer<curl_mime> Function(ffi.Pointer<CURL>)>();

  void curl_mime_free(
    ffi.Pointer<curl_mime> mime,
  ) {
    return _curl_mime_free(
      mime,
    );
  }

  late final _curl_mime_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<curl_mime>)>>(
          'curl_mime_free');
  late final _curl_mime_free =
      _curl_mime_freePtr.asFunction<void Function(ffi.Pointer<curl_mime>)>();

  ffi.Pointer<curl_mimepart> curl_mime_addpart(
    ffi.Pointer<curl_mime> mime,
  ) {
    return _curl_mime_addpart(
      mime,
    );
  }

  late final _curl_mime_addpartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<curl_mimepart> Function(
              ffi.Pointer<curl_mime>)>>('curl_mime_addpart');
  late final _curl_mime_addpart = _curl_mime_addpartPtr.asFunction<
      ffi.Pointer<curl_mimepart> Function(ffi.Pointer<curl_mime>)>();

  int curl_mime_name(
    ffi.Pointer<curl_mimepart> part1,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _curl_mime_name(
      part1,
      name,
    );
  }

  late final _curl_mime_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<curl_mimepart>,
              ffi.Pointer<ffi.Char>)>>('curl_mime_name');
  late final _curl_mime_name = _curl_mime_namePtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<ffi.Char>)>();

  int curl_mime_filename(
    ffi.Pointer<curl_mimepart> part1,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _curl_mime_filename(
      part1,
      filename,
    );
  }

  late final _curl_mime_filenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<curl_mimepart>,
              ffi.Pointer<ffi.Char>)>>('curl_mime_filename');
  late final _curl_mime_filename = _curl_mime_filenamePtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<ffi.Char>)>();

  int curl_mime_type(
    ffi.Pointer<curl_mimepart> part1,
    ffi.Pointer<ffi.Char> mimetype,
  ) {
    return _curl_mime_type(
      part1,
      mimetype,
    );
  }

  late final _curl_mime_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<curl_mimepart>,
              ffi.Pointer<ffi.Char>)>>('curl_mime_type');
  late final _curl_mime_type = _curl_mime_typePtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<ffi.Char>)>();

  int curl_mime_encoder(
    ffi.Pointer<curl_mimepart> part1,
    ffi.Pointer<ffi.Char> encoding,
  ) {
    return _curl_mime_encoder(
      part1,
      encoding,
    );
  }

  late final _curl_mime_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<curl_mimepart>,
              ffi.Pointer<ffi.Char>)>>('curl_mime_encoder');
  late final _curl_mime_encoder = _curl_mime_encoderPtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<ffi.Char>)>();

  int curl_mime_data(
    ffi.Pointer<curl_mimepart> part1,
    ffi.Pointer<ffi.Char> data,
    int datasize,
  ) {
    return _curl_mime_data(
      part1,
      data,
      datasize,
    );
  }

  late final _curl_mime_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('curl_mime_data');
  late final _curl_mime_data = _curl_mime_dataPtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<ffi.Char>, int)>();

  int curl_mime_filedata(
    ffi.Pointer<curl_mimepart> part1,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _curl_mime_filedata(
      part1,
      filename,
    );
  }

  late final _curl_mime_filedataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<curl_mimepart>,
              ffi.Pointer<ffi.Char>)>>('curl_mime_filedata');
  late final _curl_mime_filedata = _curl_mime_filedataPtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<ffi.Char>)>();

  int curl_mime_data_cb(
    ffi.Pointer<curl_mimepart> part1,
    int datasize,
    curl_read_callback readfunc,
    curl_seek_callback seekfunc,
    curl_free_callback freefunc,
    ffi.Pointer<ffi.Void> arg,
  ) {
    return _curl_mime_data_cb(
      part1,
      datasize,
      readfunc,
      seekfunc,
      freefunc,
      arg,
    );
  }

  late final _curl_mime_data_cbPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<curl_mimepart>,
              curl_off_t,
              curl_read_callback,
              curl_seek_callback,
              curl_free_callback,
              ffi.Pointer<ffi.Void>)>>('curl_mime_data_cb');
  late final _curl_mime_data_cb = _curl_mime_data_cbPtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, int, curl_read_callback,
          curl_seek_callback, curl_free_callback, ffi.Pointer<ffi.Void>)>();

  int curl_mime_subparts(
    ffi.Pointer<curl_mimepart> part1,
    ffi.Pointer<curl_mime> subparts,
  ) {
    return _curl_mime_subparts(
      part1,
      subparts,
    );
  }

  late final _curl_mime_subpartsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<curl_mimepart>,
              ffi.Pointer<curl_mime>)>>('curl_mime_subparts');
  late final _curl_mime_subparts = _curl_mime_subpartsPtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<curl_mime>)>();

  int curl_mime_headers(
    ffi.Pointer<curl_mimepart> part1,
    ffi.Pointer<curl_slist> headers,
    int take_ownership,
  ) {
    return _curl_mime_headers(
      part1,
      headers,
      take_ownership,
    );
  }

  late final _curl_mime_headersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<curl_mimepart>,
              ffi.Pointer<curl_slist>, ffi.Int)>>('curl_mime_headers');
  late final _curl_mime_headers = _curl_mime_headersPtr.asFunction<
      int Function(ffi.Pointer<curl_mimepart>, ffi.Pointer<curl_slist>, int)>();

  int curl_formadd(
    ffi.Pointer<ffi.Pointer<curl_httppost>> httppost,
    ffi.Pointer<ffi.Pointer<curl_httppost>> last_post,
  ) {
    return _curl_formadd(
      httppost,
      last_post,
    );
  }

  late final _curl_formaddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<curl_httppost>>,
              ffi.Pointer<ffi.Pointer<curl_httppost>>)>>('curl_formadd');
  late final _curl_formadd = _curl_formaddPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<curl_httppost>>,
          ffi.Pointer<ffi.Pointer<curl_httppost>>)>();

  int curl_formget(
    ffi.Pointer<curl_httppost> form,
    ffi.Pointer<ffi.Void> arg,
    curl_formget_callback append,
  ) {
    return _curl_formget(
      form,
      arg,
      append,
    );
  }

  late final _curl_formgetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<curl_httppost>, ffi.Pointer<ffi.Void>,
              curl_formget_callback)>>('curl_formget');
  late final _curl_formget = _curl_formgetPtr.asFunction<
      int Function(ffi.Pointer<curl_httppost>, ffi.Pointer<ffi.Void>,
          curl_formget_callback)>();

  void curl_formfree(
    ffi.Pointer<curl_httppost> form,
  ) {
    return _curl_formfree(
      form,
    );
  }

  late final _curl_formfreePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<curl_httppost>)>>(
      'curl_formfree');
  late final _curl_formfree =
      _curl_formfreePtr.asFunction<void Function(ffi.Pointer<curl_httppost>)>();

  ffi.Pointer<ffi.Char> curl_getenv(
    ffi.Pointer<ffi.Char> variable,
  ) {
    return _curl_getenv(
      variable,
    );
  }

  late final _curl_getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('curl_getenv');
  late final _curl_getenv = _curl_getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> curl_version() {
    return _curl_version();
  }

  late final _curl_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'curl_version');
  late final _curl_version =
      _curl_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> curl_easy_escape(
    ffi.Pointer<CURL> handle,
    ffi.Pointer<ffi.Char> string,
    int length,
  ) {
    return _curl_easy_escape(
      handle,
      string,
      length,
    );
  }

  late final _curl_easy_escapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<CURL>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('curl_easy_escape');
  late final _curl_easy_escape = _curl_easy_escapePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<CURL>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> curl_escape(
    ffi.Pointer<ffi.Char> string,
    int length,
  ) {
    return _curl_escape(
      string,
      length,
    );
  }

  late final _curl_escapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('curl_escape');
  late final _curl_escape = _curl_escapePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> curl_easy_unescape(
    ffi.Pointer<CURL> handle,
    ffi.Pointer<ffi.Char> string,
    int length,
    ffi.Pointer<ffi.Int> outlength,
  ) {
    return _curl_easy_unescape(
      handle,
      string,
      length,
      outlength,
    );
  }

  late final _curl_easy_unescapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<CURL>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('curl_easy_unescape');
  late final _curl_easy_unescape = _curl_easy_unescapePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<CURL>, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> curl_unescape(
    ffi.Pointer<ffi.Char> string,
    int length,
  ) {
    return _curl_unescape(
      string,
      length,
    );
  }

  late final _curl_unescapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('curl_unescape');
  late final _curl_unescape = _curl_unescapePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  void curl_free(
    ffi.Pointer<ffi.Void> p,
  ) {
    return _curl_free(
      p,
    );
  }

  late final _curl_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'curl_free');
  late final _curl_free =
      _curl_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int curl_global_init(
    int flags,
  ) {
    return _curl_global_init(
      flags,
    );
  }

  late final _curl_global_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Long)>>(
          'curl_global_init');
  late final _curl_global_init =
      _curl_global_initPtr.asFunction<int Function(int)>();

  int curl_global_init_mem(
    int flags,
    curl_malloc_callback m,
    curl_free_callback f,
    curl_realloc_callback r,
    curl_strdup_callback s,
    curl_calloc_callback c,
  ) {
    return _curl_global_init_mem(
      flags,
      m,
      f,
      r,
      s,
      c,
    );
  }

  late final _curl_global_init_memPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Long,
              curl_malloc_callback,
              curl_free_callback,
              curl_realloc_callback,
              curl_strdup_callback,
              curl_calloc_callback)>>('curl_global_init_mem');
  late final _curl_global_init_mem = _curl_global_init_memPtr.asFunction<
      int Function(int, curl_malloc_callback, curl_free_callback,
          curl_realloc_callback, curl_strdup_callback, curl_calloc_callback)>();

  void curl_global_cleanup() {
    return _curl_global_cleanup();
  }

  late final _curl_global_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('curl_global_cleanup');
  late final _curl_global_cleanup =
      _curl_global_cleanupPtr.asFunction<void Function()>();

  int curl_global_sslset(
    int id,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<curl_ssl_backend>>> avail,
  ) {
    return _curl_global_sslset(
      id,
      name,
      avail,
    );
  }

  late final _curl_global_sslsetPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<curl_ssl_backend>>>)>>(
      'curl_global_sslset');
  late final _curl_global_sslset = _curl_global_sslsetPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<curl_ssl_backend>>>)>();

  ffi.Pointer<curl_slist> curl_slist_append(
    ffi.Pointer<curl_slist> list,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _curl_slist_append(
      list,
      data,
    );
  }

  late final _curl_slist_appendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<curl_slist> Function(ffi.Pointer<curl_slist>,
              ffi.Pointer<ffi.Char>)>>('curl_slist_append');
  late final _curl_slist_append = _curl_slist_appendPtr.asFunction<
      ffi.Pointer<curl_slist> Function(
          ffi.Pointer<curl_slist>, ffi.Pointer<ffi.Char>)>();

  void curl_slist_free_all(
    ffi.Pointer<curl_slist> list,
  ) {
    return _curl_slist_free_all(
      list,
    );
  }

  late final _curl_slist_free_allPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<curl_slist>)>>(
          'curl_slist_free_all');
  late final _curl_slist_free_all = _curl_slist_free_allPtr
      .asFunction<void Function(ffi.Pointer<curl_slist>)>();

  int curl_getdate(
    ffi.Pointer<ffi.Char> p,
    ffi.Pointer<time_t> unused,
  ) {
    return _curl_getdate(
      p,
      unused,
    );
  }

  late final _curl_getdatePtr = _lookup<
      ffi.NativeFunction<
          time_t Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<time_t>)>>('curl_getdate');
  late final _curl_getdate = _curl_getdatePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<time_t>)>();

  ffi.Pointer<CURLSH> curl_share_init() {
    return _curl_share_init();
  }

  late final _curl_share_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CURLSH> Function()>>(
          'curl_share_init');
  late final _curl_share_init =
      _curl_share_initPtr.asFunction<ffi.Pointer<CURLSH> Function()>();

  int $curl_share_setopt(
    ffi.Pointer<CURLSH> share,
    int option,
  ) {
    return _$curl_share_setopt(
      share,
      option,
    );
  }

  late final _$curl_share_setoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURLSH>, ffi.Int32)>>('curl_share_setopt');
  late final _$curl_share_setopt = _$curl_share_setoptPtr
      .asFunction<int Function(ffi.Pointer<CURLSH>, int)>();

  int curl_share_cleanup(
    ffi.Pointer<CURLSH> share,
  ) {
    return _curl_share_cleanup(
      share,
    );
  }

  late final _curl_share_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURLSH>)>>(
          'curl_share_cleanup');
  late final _curl_share_cleanup =
      _curl_share_cleanupPtr.asFunction<int Function(ffi.Pointer<CURLSH>)>();

  ffi.Pointer<curl_version_info_data> curl_version_info(
    int arg0,
  ) {
    return _curl_version_info(
      arg0,
    );
  }

  late final _curl_version_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<curl_version_info_data> Function(
              ffi.Int32)>>('curl_version_info');
  late final _curl_version_info = _curl_version_infoPtr
      .asFunction<ffi.Pointer<curl_version_info_data> Function(int)>();

  ffi.Pointer<ffi.Char> curl_easy_strerror(
    int arg0,
  ) {
    return _curl_easy_strerror(
      arg0,
    );
  }

  late final _curl_easy_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'curl_easy_strerror');
  late final _curl_easy_strerror =
      _curl_easy_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> curl_share_strerror(
    int arg0,
  ) {
    return _curl_share_strerror(
      arg0,
    );
  }

  late final _curl_share_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'curl_share_strerror');
  late final _curl_share_strerror =
      _curl_share_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int curl_easy_pause(
    ffi.Pointer<CURL> handle,
    int bitmask,
  ) {
    return _curl_easy_pause(
      handle,
      bitmask,
    );
  }

  late final _curl_easy_pausePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURL>, ffi.Int)>>(
      'curl_easy_pause');
  late final _curl_easy_pause =
      _curl_easy_pausePtr.asFunction<int Function(ffi.Pointer<CURL>, int)>();

  ffi.Pointer<CURL> curl_easy_init() {
    return _curl_easy_init();
  }

  late final _curl_easy_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CURL> Function()>>(
          'curl_easy_init');
  late final _curl_easy_init =
      _curl_easy_initPtr.asFunction<ffi.Pointer<CURL> Function()>();

  int $curl_easy_setopt(
    ffi.Pointer<CURL> curl,
    int option,
  ) {
    return _$curl_easy_setopt(
      curl,
      option,
    );
  }

  late final _$curl_easy_setoptPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURL>, ffi.Int32)>>(
      'curl_easy_setopt');
  late final _$curl_easy_setopt =
      _$curl_easy_setoptPtr.asFunction<int Function(ffi.Pointer<CURL>, int)>();

  int curl_easy_perform(
    ffi.Pointer<CURL> curl,
  ) {
    return _curl_easy_perform(
      curl,
    );
  }

  late final _curl_easy_performPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURL>)>>(
          'curl_easy_perform');
  late final _curl_easy_perform =
      _curl_easy_performPtr.asFunction<int Function(ffi.Pointer<CURL>)>();

  void curl_easy_cleanup(
    ffi.Pointer<CURL> curl,
  ) {
    return _curl_easy_cleanup(
      curl,
    );
  }

  late final _curl_easy_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CURL>)>>(
          'curl_easy_cleanup');
  late final _curl_easy_cleanup =
      _curl_easy_cleanupPtr.asFunction<void Function(ffi.Pointer<CURL>)>();

  int $curl_easy_getinfo(
    ffi.Pointer<CURL> curl,
    int info,
  ) {
    return _$curl_easy_getinfo(
      curl,
      info,
    );
  }

  late final _$curl_easy_getinfoPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURL>, ffi.Int32)>>(
      'curl_easy_getinfo');
  late final _$curl_easy_getinfo =
      _$curl_easy_getinfoPtr.asFunction<int Function(ffi.Pointer<CURL>, int)>();

  ffi.Pointer<CURL> curl_easy_duphandle(
    ffi.Pointer<CURL> curl,
  ) {
    return _curl_easy_duphandle(
      curl,
    );
  }

  late final _curl_easy_duphandlePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CURL> Function(ffi.Pointer<CURL>)>>(
      'curl_easy_duphandle');
  late final _curl_easy_duphandle = _curl_easy_duphandlePtr
      .asFunction<ffi.Pointer<CURL> Function(ffi.Pointer<CURL>)>();

  void curl_easy_reset(
    ffi.Pointer<CURL> curl,
  ) {
    return _curl_easy_reset(
      curl,
    );
  }

  late final _curl_easy_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CURL>)>>(
          'curl_easy_reset');
  late final _curl_easy_reset =
      _curl_easy_resetPtr.asFunction<void Function(ffi.Pointer<CURL>)>();

  int curl_easy_recv(
    ffi.Pointer<CURL> curl,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Size> n,
  ) {
    return _curl_easy_recv(
      curl,
      buffer,
      buflen,
      n,
    );
  }

  late final _curl_easy_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURL>, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('curl_easy_recv');
  late final _curl_easy_recv = _curl_easy_recvPtr.asFunction<
      int Function(ffi.Pointer<CURL>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>();

  int curl_easy_send(
    ffi.Pointer<CURL> curl,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Size> n,
  ) {
    return _curl_easy_send(
      curl,
      buffer,
      buflen,
      n,
    );
  }

  late final _curl_easy_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURL>, ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Size>)>>('curl_easy_send');
  late final _curl_easy_send = _curl_easy_sendPtr.asFunction<
      int Function(ffi.Pointer<CURL>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>)>();

  int curl_easy_upkeep(
    ffi.Pointer<CURL> curl,
  ) {
    return _curl_easy_upkeep(
      curl,
    );
  }

  late final _curl_easy_upkeepPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURL>)>>(
          'curl_easy_upkeep');
  late final _curl_easy_upkeep =
      _curl_easy_upkeepPtr.asFunction<int Function(ffi.Pointer<CURL>)>();

  ffi.Pointer<CURLM> curl_multi_init() {
    return _curl_multi_init();
  }

  late final _curl_multi_initPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CURLM> Function()>>(
          'curl_multi_init');
  late final _curl_multi_init =
      _curl_multi_initPtr.asFunction<ffi.Pointer<CURLM> Function()>();

  int curl_multi_add_handle(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<CURL> curl_handle,
  ) {
    return _curl_multi_add_handle(
      multi_handle,
      curl_handle,
    );
  }

  late final _curl_multi_add_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURLM>, ffi.Pointer<CURL>)>>('curl_multi_add_handle');
  late final _curl_multi_add_handle = _curl_multi_add_handlePtr
      .asFunction<int Function(ffi.Pointer<CURLM>, ffi.Pointer<CURL>)>();

  int curl_multi_remove_handle(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<CURL> curl_handle,
  ) {
    return _curl_multi_remove_handle(
      multi_handle,
      curl_handle,
    );
  }

  late final _curl_multi_remove_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURLM>,
              ffi.Pointer<CURL>)>>('curl_multi_remove_handle');
  late final _curl_multi_remove_handle = _curl_multi_remove_handlePtr
      .asFunction<int Function(ffi.Pointer<CURLM>, ffi.Pointer<CURL>)>();

  int curl_multi_fdset(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<fd_set> read_fd_set,
    ffi.Pointer<fd_set> write_fd_set,
    ffi.Pointer<fd_set> exc_fd_set,
    ffi.Pointer<ffi.Int> max_fd,
  ) {
    return _curl_multi_fdset(
      multi_handle,
      read_fd_set,
      write_fd_set,
      exc_fd_set,
      max_fd,
    );
  }

  late final _curl_multi_fdsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURLM>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<fd_set>,
              ffi.Pointer<ffi.Int>)>>('curl_multi_fdset');
  late final _curl_multi_fdset = _curl_multi_fdsetPtr.asFunction<
      int Function(ffi.Pointer<CURLM>, ffi.Pointer<fd_set>, ffi.Pointer<fd_set>,
          ffi.Pointer<fd_set>, ffi.Pointer<ffi.Int>)>();

  int curl_multi_wait(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<curl_waitfd> extra_fds,
    int extra_nfds,
    int timeout_ms,
    ffi.Pointer<ffi.Int> ret,
  ) {
    return _curl_multi_wait(
      multi_handle,
      extra_fds,
      extra_nfds,
      timeout_ms,
      ret,
    );
  }

  late final _curl_multi_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURLM>,
              ffi.Pointer<curl_waitfd>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('curl_multi_wait');
  late final _curl_multi_wait = _curl_multi_waitPtr.asFunction<
      int Function(ffi.Pointer<CURLM>, ffi.Pointer<curl_waitfd>, int, int,
          ffi.Pointer<ffi.Int>)>();

  int curl_multi_poll(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<curl_waitfd> extra_fds,
    int extra_nfds,
    int timeout_ms,
    ffi.Pointer<ffi.Int> ret,
  ) {
    return _curl_multi_poll(
      multi_handle,
      extra_fds,
      extra_nfds,
      timeout_ms,
      ret,
    );
  }

  late final _curl_multi_pollPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURLM>,
              ffi.Pointer<curl_waitfd>,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Int>)>>('curl_multi_poll');
  late final _curl_multi_poll = _curl_multi_pollPtr.asFunction<
      int Function(ffi.Pointer<CURLM>, ffi.Pointer<curl_waitfd>, int, int,
          ffi.Pointer<ffi.Int>)>();

  int curl_multi_wakeup(
    ffi.Pointer<CURLM> multi_handle,
  ) {
    return _curl_multi_wakeup(
      multi_handle,
    );
  }

  late final _curl_multi_wakeupPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURLM>)>>(
          'curl_multi_wakeup');
  late final _curl_multi_wakeup =
      _curl_multi_wakeupPtr.asFunction<int Function(ffi.Pointer<CURLM>)>();

  int curl_multi_perform(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<ffi.Int> running_handles,
  ) {
    return _curl_multi_perform(
      multi_handle,
      running_handles,
    );
  }

  late final _curl_multi_performPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURLM>, ffi.Pointer<ffi.Int>)>>('curl_multi_perform');
  late final _curl_multi_perform = _curl_multi_performPtr
      .asFunction<int Function(ffi.Pointer<CURLM>, ffi.Pointer<ffi.Int>)>();

  int curl_multi_cleanup(
    ffi.Pointer<CURLM> multi_handle,
  ) {
    return _curl_multi_cleanup(
      multi_handle,
    );
  }

  late final _curl_multi_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURLM>)>>(
          'curl_multi_cleanup');
  late final _curl_multi_cleanup =
      _curl_multi_cleanupPtr.asFunction<int Function(ffi.Pointer<CURLM>)>();

  ffi.Pointer<CURLMsg> curl_multi_info_read(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<ffi.Int> msgs_in_queue,
  ) {
    return _curl_multi_info_read(
      multi_handle,
      msgs_in_queue,
    );
  }

  late final _curl_multi_info_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CURLMsg> Function(ffi.Pointer<CURLM>,
              ffi.Pointer<ffi.Int>)>>('curl_multi_info_read');
  late final _curl_multi_info_read = _curl_multi_info_readPtr.asFunction<
      ffi.Pointer<CURLMsg> Function(
          ffi.Pointer<CURLM>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> curl_multi_strerror(
    int arg0,
  ) {
    return _curl_multi_strerror(
      arg0,
    );
  }

  late final _curl_multi_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'curl_multi_strerror');
  late final _curl_multi_strerror =
      _curl_multi_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int curl_multi_socket(
    ffi.Pointer<CURLM> multi_handle,
    int s,
    ffi.Pointer<ffi.Int> running_handles,
  ) {
    return _curl_multi_socket(
      multi_handle,
      s,
      running_handles,
    );
  }

  late final _curl_multi_socketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURLM>, curl_socket_t,
              ffi.Pointer<ffi.Int>)>>('curl_multi_socket');
  late final _curl_multi_socket = _curl_multi_socketPtr.asFunction<
      int Function(ffi.Pointer<CURLM>, int, ffi.Pointer<ffi.Int>)>();

  int curl_multi_socket_action(
    ffi.Pointer<CURLM> multi_handle,
    int s,
    int ev_bitmask,
    ffi.Pointer<ffi.Int> running_handles,
  ) {
    return _curl_multi_socket_action(
      multi_handle,
      s,
      ev_bitmask,
      running_handles,
    );
  }

  late final _curl_multi_socket_actionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURLM>, curl_socket_t, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('curl_multi_socket_action');
  late final _curl_multi_socket_action =
      _curl_multi_socket_actionPtr.asFunction<
          int Function(ffi.Pointer<CURLM>, int, int, ffi.Pointer<ffi.Int>)>();

  int curl_multi_socket_all(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<ffi.Int> running_handles,
  ) {
    return _curl_multi_socket_all(
      multi_handle,
      running_handles,
    );
  }

  late final _curl_multi_socket_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURLM>,
              ffi.Pointer<ffi.Int>)>>('curl_multi_socket_all');
  late final _curl_multi_socket_all = _curl_multi_socket_allPtr
      .asFunction<int Function(ffi.Pointer<CURLM>, ffi.Pointer<ffi.Int>)>();

  int curl_multi_timeout(
    ffi.Pointer<CURLM> multi_handle,
    ffi.Pointer<ffi.Long> milliseconds,
  ) {
    return _curl_multi_timeout(
      multi_handle,
      milliseconds,
    );
  }

  late final _curl_multi_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURLM>,
              ffi.Pointer<ffi.Long>)>>('curl_multi_timeout');
  late final _curl_multi_timeout = _curl_multi_timeoutPtr
      .asFunction<int Function(ffi.Pointer<CURLM>, ffi.Pointer<ffi.Long>)>();

  int $curl_multi_setopt(
    ffi.Pointer<CURLM> multi_handle,
    int option,
  ) {
    return _$curl_multi_setopt(
      multi_handle,
      option,
    );
  }

  late final _$curl_multi_setoptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURLM>, ffi.Int32)>>('curl_multi_setopt');
  late final _$curl_multi_setopt = _$curl_multi_setoptPtr
      .asFunction<int Function(ffi.Pointer<CURLM>, int)>();

  int curl_multi_assign(
    ffi.Pointer<CURLM> multi_handle,
    int sockfd,
    ffi.Pointer<ffi.Void> sockp,
  ) {
    return _curl_multi_assign(
      multi_handle,
      sockfd,
      sockp,
    );
  }

  late final _curl_multi_assignPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURLM>, curl_socket_t,
              ffi.Pointer<ffi.Void>)>>('curl_multi_assign');
  late final _curl_multi_assign = _curl_multi_assignPtr.asFunction<
      int Function(ffi.Pointer<CURLM>, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> curl_pushheader_bynum(
    ffi.Pointer<curl_pushheaders> h,
    int num,
  ) {
    return _curl_pushheader_bynum(
      h,
      num,
    );
  }

  late final _curl_pushheader_bynumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<curl_pushheaders>,
              ffi.Size)>>('curl_pushheader_bynum');
  late final _curl_pushheader_bynum = _curl_pushheader_bynumPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<curl_pushheaders>, int)>();

  ffi.Pointer<ffi.Char> curl_pushheader_byname(
    ffi.Pointer<curl_pushheaders> h,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _curl_pushheader_byname(
      h,
      name,
    );
  }

  late final _curl_pushheader_bynamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<curl_pushheaders>,
              ffi.Pointer<ffi.Char>)>>('curl_pushheader_byname');
  late final _curl_pushheader_byname = _curl_pushheader_bynamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<curl_pushheaders>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<CURLU> curl_url() {
    return _curl_url();
  }

  late final _curl_urlPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<CURLU> Function()>>('curl_url');
  late final _curl_url =
      _curl_urlPtr.asFunction<ffi.Pointer<CURLU> Function()>();

  void curl_url_cleanup(
    ffi.Pointer<CURLU> handle,
  ) {
    return _curl_url_cleanup(
      handle,
    );
  }

  late final _curl_url_cleanupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CURLU>)>>(
          'curl_url_cleanup');
  late final _curl_url_cleanup =
      _curl_url_cleanupPtr.asFunction<void Function(ffi.Pointer<CURLU>)>();

  ffi.Pointer<CURLU> curl_url_dup(
    ffi.Pointer<CURLU> in1,
  ) {
    return _curl_url_dup(
      in1,
    );
  }

  late final _curl_url_dupPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<CURLU> Function(ffi.Pointer<CURLU>)>>(
      'curl_url_dup');
  late final _curl_url_dup = _curl_url_dupPtr
      .asFunction<ffi.Pointer<CURLU> Function(ffi.Pointer<CURLU>)>();

  int curl_url_get(
    ffi.Pointer<CURLU> handle,
    int what,
    ffi.Pointer<ffi.Pointer<ffi.Char>> part1,
    int flags,
  ) {
    return _curl_url_get(
      handle,
      what,
      part1,
      flags,
    );
  }

  late final _curl_url_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURLU>,
              ffi.Int32,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.UnsignedInt)>>('curl_url_get');
  late final _curl_url_get = _curl_url_getPtr.asFunction<
      int Function(
          ffi.Pointer<CURLU>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int curl_url_set(
    ffi.Pointer<CURLU> handle,
    int what,
    ffi.Pointer<ffi.Char> part1,
    int flags,
  ) {
    return _curl_url_set(
      handle,
      what,
      part1,
      flags,
    );
  }

  late final _curl_url_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CURLU>, ffi.Int32,
              ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>>('curl_url_set');
  late final _curl_url_set = _curl_url_setPtr.asFunction<
      int Function(ffi.Pointer<CURLU>, int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> curl_url_strerror(
    int arg0,
  ) {
    return _curl_url_strerror(
      arg0,
    );
  }

  late final _curl_url_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'curl_url_strerror');
  late final _curl_url_strerror =
      _curl_url_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<curl_easyoption> curl_easy_option_by_name(
    ffi.Pointer<ffi.Char> name,
  ) {
    return _curl_easy_option_by_name(
      name,
    );
  }

  late final _curl_easy_option_by_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<curl_easyoption> Function(
              ffi.Pointer<ffi.Char>)>>('curl_easy_option_by_name');
  late final _curl_easy_option_by_name =
      _curl_easy_option_by_namePtr.asFunction<
          ffi.Pointer<curl_easyoption> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<curl_easyoption> curl_easy_option_by_id(
    int id,
  ) {
    return _curl_easy_option_by_id(
      id,
    );
  }

  late final _curl_easy_option_by_idPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<curl_easyoption> Function(ffi.Int32)>>(
      'curl_easy_option_by_id');
  late final _curl_easy_option_by_id = _curl_easy_option_by_idPtr
      .asFunction<ffi.Pointer<curl_easyoption> Function(int)>();

  ffi.Pointer<curl_easyoption> curl_easy_option_next(
    ffi.Pointer<curl_easyoption> prev,
  ) {
    return _curl_easy_option_next(
      prev,
    );
  }

  late final _curl_easy_option_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<curl_easyoption> Function(
              ffi.Pointer<curl_easyoption>)>>('curl_easy_option_next');
  late final _curl_easy_option_next = _curl_easy_option_nextPtr.asFunction<
      ffi.Pointer<curl_easyoption> Function(ffi.Pointer<curl_easyoption>)>();

  int curl_easy_header(
    ffi.Pointer<CURL> easy,
    ffi.Pointer<ffi.Char> name,
    int index,
    int origin,
    int request,
    ffi.Pointer<ffi.Pointer<curl_header>> hout,
  ) {
    return _curl_easy_header(
      easy,
      name,
      index,
      origin,
      request,
      hout,
    );
  }

  late final _curl_easy_headerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURL>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.UnsignedInt,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<curl_header>>)>>('curl_easy_header');
  late final _curl_easy_header = _curl_easy_headerPtr.asFunction<
      int Function(ffi.Pointer<CURL>, ffi.Pointer<ffi.Char>, int, int, int,
          ffi.Pointer<ffi.Pointer<curl_header>>)>();

  ffi.Pointer<curl_header> curl_easy_nextheader(
    ffi.Pointer<CURL> easy,
    int origin,
    int request,
    ffi.Pointer<curl_header> prev,
  ) {
    return _curl_easy_nextheader(
      easy,
      origin,
      request,
      prev,
    );
  }

  late final _curl_easy_nextheaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<curl_header> Function(ffi.Pointer<CURL>, ffi.UnsignedInt,
              ffi.Int, ffi.Pointer<curl_header>)>>('curl_easy_nextheader');
  late final _curl_easy_nextheader = _curl_easy_nextheaderPtr.asFunction<
      ffi.Pointer<curl_header> Function(
          ffi.Pointer<CURL>, int, int, ffi.Pointer<curl_header>)>();

  int curl_ws_recv(
    ffi.Pointer<CURL> curl,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Size> recv,
    ffi.Pointer<ffi.Pointer<curl_ws_frame>> metap,
  ) {
    return _curl_ws_recv(
      curl,
      buffer,
      buflen,
      recv,
      metap,
    );
  }

  late final _curl_ws_recvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURL>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Pointer<curl_ws_frame>>)>>('curl_ws_recv');
  late final _curl_ws_recv = _curl_ws_recvPtr.asFunction<
      int Function(ffi.Pointer<CURL>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Pointer<curl_ws_frame>>)>();

  int curl_ws_send(
    ffi.Pointer<CURL> curl,
    ffi.Pointer<ffi.Void> buffer,
    int buflen,
    ffi.Pointer<ffi.Size> sent,
    int framesize,
    int sendflags,
  ) {
    return _curl_ws_send(
      curl,
      buffer,
      buflen,
      sent,
      framesize,
      sendflags,
    );
  }

  late final _curl_ws_sendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CURL>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ffi.Size>,
              curl_off_t,
              ffi.UnsignedInt)>>('curl_ws_send');
  late final _curl_ws_send = _curl_ws_sendPtr.asFunction<
      int Function(ffi.Pointer<CURL>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ffi.Size>, int, int)>();

  ffi.Pointer<curl_ws_frame> curl_ws_meta(
    ffi.Pointer<CURL> curl,
  ) {
    return _curl_ws_meta(
      curl,
    );
  }

  late final _curl_ws_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<curl_ws_frame> Function(
              ffi.Pointer<CURL>)>>('curl_ws_meta');
  late final _curl_ws_meta = _curl_ws_metaPtr
      .asFunction<ffi.Pointer<curl_ws_frame> Function(ffi.Pointer<CURL>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final Bindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      get curl_global_cleanup => _library._curl_global_cleanupPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<curl_slist>)>>
      get curl_slist_free_all => _library._curl_slist_free_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<CURLSH>, ffi.Int32)>>
      get $curl_share_setopt => _library._$curl_share_setoptPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURLSH>)>>
      get curl_share_cleanup => _library._curl_share_cleanupPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURL>, ffi.Int32)>>
      get $curl_easy_setopt => _library._$curl_easy_setoptPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CURL>)>>
      get curl_easy_cleanup => _library._curl_easy_cleanupPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURL>, ffi.Int32)>>
      get $curl_easy_getinfo => _library._$curl_easy_getinfoPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURLM>)>>
      get curl_multi_cleanup => _library._curl_multi_cleanupPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CURLM>, ffi.Int32)>>
      get $curl_multi_setopt => _library._$curl_multi_setoptPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<CURLU>)>>
      get curl_url_cleanup => _library._curl_url_cleanupPtr;
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

abstract class curl_sslbackend {
  static const int CURLSSLBACKEND_NONE = 0;
  static const int CURLSSLBACKEND_OPENSSL = 1;
  static const int CURLSSLBACKEND_GNUTLS = 2;
  static const int CURLSSLBACKEND_NSS = 3;
  static const int CURLSSLBACKEND_OBSOLETE4 = 4;
  static const int CURLSSLBACKEND_GSKIT = 5;
  static const int CURLSSLBACKEND_POLARSSL = 6;
  static const int CURLSSLBACKEND_WOLFSSL = 7;
  static const int CURLSSLBACKEND_SCHANNEL = 8;
  static const int CURLSSLBACKEND_SECURETRANSPORT = 9;
  static const int CURLSSLBACKEND_AXTLS = 10;
  static const int CURLSSLBACKEND_MBEDTLS = 11;
  static const int CURLSSLBACKEND_MESALINK = 12;
  static const int CURLSSLBACKEND_BEARSSL = 13;
  static const int CURLSSLBACKEND_RUSTLS = 14;
}

class curl_httppost extends ffi.Struct {
  external ffi.Pointer<curl_httppost> next;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Long()
  external int namelength;

  external ffi.Pointer<ffi.Char> contents;

  @ffi.Long()
  external int contentslength;

  external ffi.Pointer<ffi.Char> buffer;

  @ffi.Long()
  external int bufferlength;

  external ffi.Pointer<ffi.Char> contenttype;

  external ffi.Pointer<curl_slist> contentheader;

  external ffi.Pointer<curl_httppost> more;

  @ffi.Long()
  external int flags;

  external ffi.Pointer<ffi.Char> showfilename;

  external ffi.Pointer<ffi.Void> userp;

  @curl_off_t()
  external int contentlen;
}

class curl_slist extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  external ffi.Pointer<curl_slist> next;
}

typedef curl_off_t = ffi.Long;

abstract class curlfiletype {
  static const int CURLFILETYPE_FILE = 0;
  static const int CURLFILETYPE_DIRECTORY = 1;
  static const int CURLFILETYPE_SYMLINK = 2;
  static const int CURLFILETYPE_DEVICE_BLOCK = 3;
  static const int CURLFILETYPE_DEVICE_CHAR = 4;
  static const int CURLFILETYPE_NAMEDPIPE = 5;
  static const int CURLFILETYPE_SOCKET = 6;
  static const int CURLFILETYPE_DOOR = 7;
  static const int CURLFILETYPE_UNKNOWN = 8;
}

class curl_fileinfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> filename;

  @ffi.Int32()
  external int filetype;

  @time_t()
  external int time;

  @ffi.UnsignedInt()
  external int perm;

  @ffi.Int()
  external int uid;

  @ffi.Int()
  external int gid;

  @curl_off_t()
  external int size;

  @ffi.Long()
  external int hardlinks;

  external UnnamedStruct1 strings;

  @ffi.UnsignedInt()
  external int flags;

  external ffi.Pointer<ffi.Char> b_data;

  @ffi.Size()
  external int b_size;

  @ffi.Size()
  external int b_used;
}

typedef time_t = __darwin_time_t;
typedef __darwin_time_t = ffi.Long;

class UnnamedStruct1 extends ffi.Struct {
  external ffi.Pointer<ffi.Char> time;

  external ffi.Pointer<ffi.Char> perm;

  external ffi.Pointer<ffi.Char> user;

  external ffi.Pointer<ffi.Char> group;

  external ffi.Pointer<ffi.Char> target;
}

abstract class curlsocktype {
  static const int CURLSOCKTYPE_IPCXN = 0;
  static const int CURLSOCKTYPE_ACCEPT = 1;
  static const int CURLSOCKTYPE_LAST = 2;
}

class curl_sockaddr extends ffi.Struct {
  @ffi.Int()
  external int family;

  @ffi.Int()
  external int socktype;

  @ffi.Int()
  external int protocol;

  @ffi.UnsignedInt()
  external int addrlen;

  external sockaddr addr;
}

class sockaddr extends ffi.Struct {
  @__uint8_t()
  external int sa_len;

  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef __uint8_t = ffi.UnsignedChar;
typedef sa_family_t = __uint8_t;

abstract class curlioerr {
  static const int CURLIOE_OK = 0;
  static const int CURLIOE_UNKNOWNCMD = 1;
  static const int CURLIOE_FAILRESTART = 2;
  static const int CURLIOE_LAST = 3;
}

abstract class curliocmd {
  static const int CURLIOCMD_NOP = 0;
  static const int CURLIOCMD_RESTARTREAD = 1;
  static const int CURLIOCMD_LAST = 2;
}

abstract class curl_infotype {
  static const int CURLINFO_TEXT = 0;
  static const int CURLINFO_HEADER_IN = 1;
  static const int CURLINFO_HEADER_OUT = 2;
  static const int CURLINFO_DATA_IN = 3;
  static const int CURLINFO_DATA_OUT = 4;
  static const int CURLINFO_SSL_DATA_IN = 5;
  static const int CURLINFO_SSL_DATA_OUT = 6;
  static const int CURLINFO_END = 7;
}

abstract class CURLcode {
  static const int CURLE_OK = 0;
  static const int CURLE_UNSUPPORTED_PROTOCOL = 1;
  static const int CURLE_FAILED_INIT = 2;
  static const int CURLE_URL_MALFORMAT = 3;
  static const int CURLE_NOT_BUILT_IN = 4;
  static const int CURLE_COULDNT_RESOLVE_PROXY = 5;
  static const int CURLE_COULDNT_RESOLVE_HOST = 6;
  static const int CURLE_COULDNT_CONNECT = 7;
  static const int CURLE_WEIRD_SERVER_REPLY = 8;
  static const int CURLE_REMOTE_ACCESS_DENIED = 9;
  static const int CURLE_FTP_ACCEPT_FAILED = 10;
  static const int CURLE_FTP_WEIRD_PASS_REPLY = 11;
  static const int CURLE_FTP_ACCEPT_TIMEOUT = 12;
  static const int CURLE_FTP_WEIRD_PASV_REPLY = 13;
  static const int CURLE_FTP_WEIRD_227_FORMAT = 14;
  static const int CURLE_FTP_CANT_GET_HOST = 15;
  static const int CURLE_HTTP2 = 16;
  static const int CURLE_FTP_COULDNT_SET_TYPE = 17;
  static const int CURLE_PARTIAL_FILE = 18;
  static const int CURLE_FTP_COULDNT_RETR_FILE = 19;
  static const int CURLE_OBSOLETE20 = 20;
  static const int CURLE_QUOTE_ERROR = 21;
  static const int CURLE_HTTP_RETURNED_ERROR = 22;
  static const int CURLE_WRITE_ERROR = 23;
  static const int CURLE_OBSOLETE24 = 24;
  static const int CURLE_UPLOAD_FAILED = 25;
  static const int CURLE_READ_ERROR = 26;
  static const int CURLE_OUT_OF_MEMORY = 27;
  static const int CURLE_OPERATION_TIMEDOUT = 28;
  static const int CURLE_OBSOLETE29 = 29;
  static const int CURLE_FTP_PORT_FAILED = 30;
  static const int CURLE_FTP_COULDNT_USE_REST = 31;
  static const int CURLE_OBSOLETE32 = 32;
  static const int CURLE_RANGE_ERROR = 33;
  static const int CURLE_HTTP_POST_ERROR = 34;
  static const int CURLE_SSL_CONNECT_ERROR = 35;
  static const int CURLE_BAD_DOWNLOAD_RESUME = 36;
  static const int CURLE_FILE_COULDNT_READ_FILE = 37;
  static const int CURLE_LDAP_CANNOT_BIND = 38;
  static const int CURLE_LDAP_SEARCH_FAILED = 39;
  static const int CURLE_OBSOLETE40 = 40;
  static const int CURLE_FUNCTION_NOT_FOUND = 41;
  static const int CURLE_ABORTED_BY_CALLBACK = 42;
  static const int CURLE_BAD_FUNCTION_ARGUMENT = 43;
  static const int CURLE_OBSOLETE44 = 44;
  static const int CURLE_INTERFACE_FAILED = 45;
  static const int CURLE_OBSOLETE46 = 46;
  static const int CURLE_TOO_MANY_REDIRECTS = 47;
  static const int CURLE_UNKNOWN_OPTION = 48;
  static const int CURLE_SETOPT_OPTION_SYNTAX = 49;
  static const int CURLE_OBSOLETE50 = 50;
  static const int CURLE_OBSOLETE51 = 51;
  static const int CURLE_GOT_NOTHING = 52;
  static const int CURLE_SSL_ENGINE_NOTFOUND = 53;
  static const int CURLE_SSL_ENGINE_SETFAILED = 54;
  static const int CURLE_SEND_ERROR = 55;
  static const int CURLE_RECV_ERROR = 56;
  static const int CURLE_OBSOLETE57 = 57;
  static const int CURLE_SSL_CERTPROBLEM = 58;
  static const int CURLE_SSL_CIPHER = 59;
  static const int CURLE_PEER_FAILED_VERIFICATION = 60;
  static const int CURLE_BAD_CONTENT_ENCODING = 61;
  static const int CURLE_OBSOLETE62 = 62;
  static const int CURLE_FILESIZE_EXCEEDED = 63;
  static const int CURLE_USE_SSL_FAILED = 64;
  static const int CURLE_SEND_FAIL_REWIND = 65;
  static const int CURLE_SSL_ENGINE_INITFAILED = 66;
  static const int CURLE_LOGIN_DENIED = 67;
  static const int CURLE_TFTP_NOTFOUND = 68;
  static const int CURLE_TFTP_PERM = 69;
  static const int CURLE_REMOTE_DISK_FULL = 70;
  static const int CURLE_TFTP_ILLEGAL = 71;
  static const int CURLE_TFTP_UNKNOWNID = 72;
  static const int CURLE_REMOTE_FILE_EXISTS = 73;
  static const int CURLE_TFTP_NOSUCHUSER = 74;
  static const int CURLE_OBSOLETE75 = 75;
  static const int CURLE_OBSOLETE76 = 76;
  static const int CURLE_SSL_CACERT_BADFILE = 77;
  static const int CURLE_REMOTE_FILE_NOT_FOUND = 78;
  static const int CURLE_SSH = 79;
  static const int CURLE_SSL_SHUTDOWN_FAILED = 80;
  static const int CURLE_AGAIN = 81;
  static const int CURLE_SSL_CRL_BADFILE = 82;
  static const int CURLE_SSL_ISSUER_ERROR = 83;
  static const int CURLE_FTP_PRET_FAILED = 84;
  static const int CURLE_RTSP_CSEQ_ERROR = 85;
  static const int CURLE_RTSP_SESSION_ERROR = 86;
  static const int CURLE_FTP_BAD_FILE_LIST = 87;
  static const int CURLE_CHUNK_FAILED = 88;
  static const int CURLE_NO_CONNECTION_AVAILABLE = 89;
  static const int CURLE_SSL_PINNEDPUBKEYNOTMATCH = 90;
  static const int CURLE_SSL_INVALIDCERTSTATUS = 91;
  static const int CURLE_HTTP2_STREAM = 92;
  static const int CURLE_RECURSIVE_API_CALL = 93;
  static const int CURLE_AUTH_ERROR = 94;
  static const int CURLE_HTTP3 = 95;
  static const int CURLE_QUIC_CONNECT_ERROR = 96;
  static const int CURLE_PROXY = 97;
  static const int CURLE_SSL_CLIENTCERT = 98;
  static const int CURLE_UNRECOVERABLE_POLL = 99;
  static const int CURL_LAST = 100;
}

abstract class CURLproxycode {
  static const int CURLPX_OK = 0;
  static const int CURLPX_BAD_ADDRESS_TYPE = 1;
  static const int CURLPX_BAD_VERSION = 2;
  static const int CURLPX_CLOSED = 3;
  static const int CURLPX_GSSAPI = 4;
  static const int CURLPX_GSSAPI_PERMSG = 5;
  static const int CURLPX_GSSAPI_PROTECTION = 6;
  static const int CURLPX_IDENTD = 7;
  static const int CURLPX_IDENTD_DIFFER = 8;
  static const int CURLPX_LONG_HOSTNAME = 9;
  static const int CURLPX_LONG_PASSWD = 10;
  static const int CURLPX_LONG_USER = 11;
  static const int CURLPX_NO_AUTH = 12;
  static const int CURLPX_RECV_ADDRESS = 13;
  static const int CURLPX_RECV_AUTH = 14;
  static const int CURLPX_RECV_CONNECT = 15;
  static const int CURLPX_RECV_REQACK = 16;
  static const int CURLPX_REPLY_ADDRESS_TYPE_NOT_SUPPORTED = 17;
  static const int CURLPX_REPLY_COMMAND_NOT_SUPPORTED = 18;
  static const int CURLPX_REPLY_CONNECTION_REFUSED = 19;
  static const int CURLPX_REPLY_GENERAL_SERVER_FAILURE = 20;
  static const int CURLPX_REPLY_HOST_UNREACHABLE = 21;
  static const int CURLPX_REPLY_NETWORK_UNREACHABLE = 22;
  static const int CURLPX_REPLY_NOT_ALLOWED = 23;
  static const int CURLPX_REPLY_TTL_EXPIRED = 24;
  static const int CURLPX_REPLY_UNASSIGNED = 25;
  static const int CURLPX_REQUEST_FAILED = 26;
  static const int CURLPX_RESOLVE_HOST = 27;
  static const int CURLPX_SEND_AUTH = 28;
  static const int CURLPX_SEND_CONNECT = 29;
  static const int CURLPX_SEND_REQUEST = 30;
  static const int CURLPX_UNKNOWN_FAIL = 31;
  static const int CURLPX_UNKNOWN_MODE = 32;
  static const int CURLPX_USER_REJECTED = 33;
  static const int CURLPX_LAST = 34;
}

abstract class curl_proxytype {
  static const int CURLPROXY_HTTP = 0;
  static const int CURLPROXY_HTTP_1_0 = 1;
  static const int CURLPROXY_HTTPS = 2;
  static const int CURLPROXY_SOCKS4 = 4;
  static const int CURLPROXY_SOCKS5 = 5;
  static const int CURLPROXY_SOCKS4A = 6;
  static const int CURLPROXY_SOCKS5_HOSTNAME = 7;
}

abstract class curl_khtype {
  static const int CURLKHTYPE_UNKNOWN = 0;
  static const int CURLKHTYPE_RSA1 = 1;
  static const int CURLKHTYPE_RSA = 2;
  static const int CURLKHTYPE_DSS = 3;
  static const int CURLKHTYPE_ECDSA = 4;
  static const int CURLKHTYPE_ED25519 = 5;
}

class curl_khkey extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  @ffi.Size()
  external int len;

  @ffi.Int32()
  external int keytype;
}

abstract class curl_khstat {
  static const int CURLKHSTAT_FINE_ADD_TO_FILE = 0;
  static const int CURLKHSTAT_FINE = 1;
  static const int CURLKHSTAT_REJECT = 2;
  static const int CURLKHSTAT_DEFER = 3;
  static const int CURLKHSTAT_FINE_REPLACE = 4;
  static const int CURLKHSTAT_LAST = 5;
}

abstract class curl_khmatch {
  static const int CURLKHMATCH_OK = 0;
  static const int CURLKHMATCH_MISMATCH = 1;
  static const int CURLKHMATCH_MISSING = 2;
  static const int CURLKHMATCH_LAST = 3;
}

abstract class curl_usessl {
  static const int CURLUSESSL_NONE = 0;
  static const int CURLUSESSL_TRY = 1;
  static const int CURLUSESSL_CONTROL = 2;
  static const int CURLUSESSL_ALL = 3;
  static const int CURLUSESSL_LAST = 4;
}

abstract class curl_ftpccc {
  static const int CURLFTPSSL_CCC_NONE = 0;
  static const int CURLFTPSSL_CCC_PASSIVE = 1;
  static const int CURLFTPSSL_CCC_ACTIVE = 2;
  static const int CURLFTPSSL_CCC_LAST = 3;
}

abstract class curl_ftpauth {
  static const int CURLFTPAUTH_DEFAULT = 0;
  static const int CURLFTPAUTH_SSL = 1;
  static const int CURLFTPAUTH_TLS = 2;
  static const int CURLFTPAUTH_LAST = 3;
}

abstract class curl_ftpcreatedir {
  static const int CURLFTP_CREATE_DIR_NONE = 0;
  static const int CURLFTP_CREATE_DIR = 1;
  static const int CURLFTP_CREATE_DIR_RETRY = 2;
  static const int CURLFTP_CREATE_DIR_LAST = 3;
}

abstract class curl_ftpmethod {
  static const int CURLFTPMETHOD_DEFAULT = 0;
  static const int CURLFTPMETHOD_MULTICWD = 1;
  static const int CURLFTPMETHOD_NOCWD = 2;
  static const int CURLFTPMETHOD_SINGLECWD = 3;
  static const int CURLFTPMETHOD_LAST = 4;
}

class curl_hstsentry extends ffi.Opaque {}

class curl_index extends ffi.Struct {
  @ffi.Size()
  external int index;

  @ffi.Size()
  external int total;
}

abstract class CURLSTScode {
  static const int CURLSTS_OK = 0;
  static const int CURLSTS_DONE = 1;
  static const int CURLSTS_FAIL = 2;
}

abstract class CURLoption {
  static const int CURLOPT_WRITEDATA = 10001;
  static const int CURLOPT_URL = 10002;
  static const int CURLOPT_PORT = 3;
  static const int CURLOPT_PROXY = 10004;
  static const int CURLOPT_USERPWD = 10005;
  static const int CURLOPT_PROXYUSERPWD = 10006;
  static const int CURLOPT_RANGE = 10007;
  static const int CURLOPT_READDATA = 10009;
  static const int CURLOPT_ERRORBUFFER = 10010;
  static const int CURLOPT_WRITEFUNCTION = 20011;
  static const int CURLOPT_READFUNCTION = 20012;
  static const int CURLOPT_TIMEOUT = 13;
  static const int CURLOPT_INFILESIZE = 14;
  static const int CURLOPT_POSTFIELDS = 10015;
  static const int CURLOPT_REFERER = 10016;
  static const int CURLOPT_FTPPORT = 10017;
  static const int CURLOPT_USERAGENT = 10018;
  static const int CURLOPT_LOW_SPEED_LIMIT = 19;
  static const int CURLOPT_LOW_SPEED_TIME = 20;
  static const int CURLOPT_RESUME_FROM = 21;
  static const int CURLOPT_COOKIE = 10022;
  static const int CURLOPT_HTTPHEADER = 10023;
  static const int CURLOPT_HTTPPOST = 10024;
  static const int CURLOPT_SSLCERT = 10025;
  static const int CURLOPT_KEYPASSWD = 10026;
  static const int CURLOPT_CRLF = 27;
  static const int CURLOPT_QUOTE = 10028;
  static const int CURLOPT_HEADERDATA = 10029;
  static const int CURLOPT_COOKIEFILE = 10031;
  static const int CURLOPT_SSLVERSION = 32;
  static const int CURLOPT_TIMECONDITION = 33;
  static const int CURLOPT_TIMEVALUE = 34;
  static const int CURLOPT_CUSTOMREQUEST = 10036;
  static const int CURLOPT_STDERR = 10037;
  static const int CURLOPT_POSTQUOTE = 10039;
  static const int CURLOPT_OBSOLETE40 = 10040;
  static const int CURLOPT_VERBOSE = 41;
  static const int CURLOPT_HEADER = 42;
  static const int CURLOPT_NOPROGRESS = 43;
  static const int CURLOPT_NOBODY = 44;
  static const int CURLOPT_FAILONERROR = 45;
  static const int CURLOPT_UPLOAD = 46;
  static const int CURLOPT_POST = 47;
  static const int CURLOPT_DIRLISTONLY = 48;
  static const int CURLOPT_APPEND = 50;
  static const int CURLOPT_NETRC = 51;
  static const int CURLOPT_FOLLOWLOCATION = 52;
  static const int CURLOPT_TRANSFERTEXT = 53;
  static const int CURLOPT_PUT = 54;
  static const int CURLOPT_PROGRESSFUNCTION = 20056;
  static const int CURLOPT_XFERINFODATA = 10057;
  static const int CURLOPT_AUTOREFERER = 58;
  static const int CURLOPT_PROXYPORT = 59;
  static const int CURLOPT_POSTFIELDSIZE = 60;
  static const int CURLOPT_HTTPPROXYTUNNEL = 61;
  static const int CURLOPT_INTERFACE = 10062;
  static const int CURLOPT_KRBLEVEL = 10063;
  static const int CURLOPT_SSL_VERIFYPEER = 64;
  static const int CURLOPT_CAINFO = 10065;
  static const int CURLOPT_MAXREDIRS = 68;
  static const int CURLOPT_FILETIME = 69;
  static const int CURLOPT_TELNETOPTIONS = 10070;
  static const int CURLOPT_MAXCONNECTS = 71;
  static const int CURLOPT_OBSOLETE72 = 72;
  static const int CURLOPT_FRESH_CONNECT = 74;
  static const int CURLOPT_FORBID_REUSE = 75;
  static const int CURLOPT_RANDOM_FILE = 10076;
  static const int CURLOPT_EGDSOCKET = 10077;
  static const int CURLOPT_CONNECTTIMEOUT = 78;
  static const int CURLOPT_HEADERFUNCTION = 20079;
  static const int CURLOPT_HTTPGET = 80;
  static const int CURLOPT_SSL_VERIFYHOST = 81;
  static const int CURLOPT_COOKIEJAR = 10082;
  static const int CURLOPT_SSL_CIPHER_LIST = 10083;
  static const int CURLOPT_HTTP_VERSION = 84;
  static const int CURLOPT_FTP_USE_EPSV = 85;
  static const int CURLOPT_SSLCERTTYPE = 10086;
  static const int CURLOPT_SSLKEY = 10087;
  static const int CURLOPT_SSLKEYTYPE = 10088;
  static const int CURLOPT_SSLENGINE = 10089;
  static const int CURLOPT_SSLENGINE_DEFAULT = 90;
  static const int CURLOPT_DNS_USE_GLOBAL_CACHE = 91;
  static const int CURLOPT_DNS_CACHE_TIMEOUT = 92;
  static const int CURLOPT_PREQUOTE = 10093;
  static const int CURLOPT_DEBUGFUNCTION = 20094;
  static const int CURLOPT_DEBUGDATA = 10095;
  static const int CURLOPT_COOKIESESSION = 96;
  static const int CURLOPT_CAPATH = 10097;
  static const int CURLOPT_BUFFERSIZE = 98;
  static const int CURLOPT_NOSIGNAL = 99;
  static const int CURLOPT_SHARE = 10100;
  static const int CURLOPT_PROXYTYPE = 101;
  static const int CURLOPT_ACCEPT_ENCODING = 10102;
  static const int CURLOPT_PRIVATE = 10103;
  static const int CURLOPT_HTTP200ALIASES = 10104;
  static const int CURLOPT_UNRESTRICTED_AUTH = 105;
  static const int CURLOPT_FTP_USE_EPRT = 106;
  static const int CURLOPT_HTTPAUTH = 107;
  static const int CURLOPT_SSL_CTX_FUNCTION = 20108;
  static const int CURLOPT_SSL_CTX_DATA = 10109;
  static const int CURLOPT_FTP_CREATE_MISSING_DIRS = 110;
  static const int CURLOPT_PROXYAUTH = 111;
  static const int CURLOPT_SERVER_RESPONSE_TIMEOUT = 112;
  static const int CURLOPT_IPRESOLVE = 113;
  static const int CURLOPT_MAXFILESIZE = 114;
  static const int CURLOPT_INFILESIZE_LARGE = 30115;
  static const int CURLOPT_RESUME_FROM_LARGE = 30116;
  static const int CURLOPT_MAXFILESIZE_LARGE = 30117;
  static const int CURLOPT_NETRC_FILE = 10118;
  static const int CURLOPT_USE_SSL = 119;
  static const int CURLOPT_POSTFIELDSIZE_LARGE = 30120;
  static const int CURLOPT_TCP_NODELAY = 121;
  static const int CURLOPT_FTPSSLAUTH = 129;
  static const int CURLOPT_IOCTLFUNCTION = 20130;
  static const int CURLOPT_IOCTLDATA = 10131;
  static const int CURLOPT_FTP_ACCOUNT = 10134;
  static const int CURLOPT_COOKIELIST = 10135;
  static const int CURLOPT_IGNORE_CONTENT_LENGTH = 136;
  static const int CURLOPT_FTP_SKIP_PASV_IP = 137;
  static const int CURLOPT_FTP_FILEMETHOD = 138;
  static const int CURLOPT_LOCALPORT = 139;
  static const int CURLOPT_LOCALPORTRANGE = 140;
  static const int CURLOPT_CONNECT_ONLY = 141;
  static const int CURLOPT_CONV_FROM_NETWORK_FUNCTION = 20142;
  static const int CURLOPT_CONV_TO_NETWORK_FUNCTION = 20143;
  static const int CURLOPT_CONV_FROM_UTF8_FUNCTION = 20144;
  static const int CURLOPT_MAX_SEND_SPEED_LARGE = 30145;
  static const int CURLOPT_MAX_RECV_SPEED_LARGE = 30146;
  static const int CURLOPT_FTP_ALTERNATIVE_TO_USER = 10147;
  static const int CURLOPT_SOCKOPTFUNCTION = 20148;
  static const int CURLOPT_SOCKOPTDATA = 10149;
  static const int CURLOPT_SSL_SESSIONID_CACHE = 150;
  static const int CURLOPT_SSH_AUTH_TYPES = 151;
  static const int CURLOPT_SSH_PUBLIC_KEYFILE = 10152;
  static const int CURLOPT_SSH_PRIVATE_KEYFILE = 10153;
  static const int CURLOPT_FTP_SSL_CCC = 154;
  static const int CURLOPT_TIMEOUT_MS = 155;
  static const int CURLOPT_CONNECTTIMEOUT_MS = 156;
  static const int CURLOPT_HTTP_TRANSFER_DECODING = 157;
  static const int CURLOPT_HTTP_CONTENT_DECODING = 158;
  static const int CURLOPT_NEW_FILE_PERMS = 159;
  static const int CURLOPT_NEW_DIRECTORY_PERMS = 160;
  static const int CURLOPT_POSTREDIR = 161;
  static const int CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = 10162;
  static const int CURLOPT_OPENSOCKETFUNCTION = 20163;
  static const int CURLOPT_OPENSOCKETDATA = 10164;
  static const int CURLOPT_COPYPOSTFIELDS = 10165;
  static const int CURLOPT_PROXY_TRANSFER_MODE = 166;
  static const int CURLOPT_SEEKFUNCTION = 20167;
  static const int CURLOPT_SEEKDATA = 10168;
  static const int CURLOPT_CRLFILE = 10169;
  static const int CURLOPT_ISSUERCERT = 10170;
  static const int CURLOPT_ADDRESS_SCOPE = 171;
  static const int CURLOPT_CERTINFO = 172;
  static const int CURLOPT_USERNAME = 10173;
  static const int CURLOPT_PASSWORD = 10174;
  static const int CURLOPT_PROXYUSERNAME = 10175;
  static const int CURLOPT_PROXYPASSWORD = 10176;
  static const int CURLOPT_NOPROXY = 10177;
  static const int CURLOPT_TFTP_BLKSIZE = 178;
  static const int CURLOPT_SOCKS5_GSSAPI_SERVICE = 10179;
  static const int CURLOPT_SOCKS5_GSSAPI_NEC = 180;
  static const int CURLOPT_PROTOCOLS = 181;
  static const int CURLOPT_REDIR_PROTOCOLS = 182;
  static const int CURLOPT_SSH_KNOWNHOSTS = 10183;
  static const int CURLOPT_SSH_KEYFUNCTION = 20184;
  static const int CURLOPT_SSH_KEYDATA = 10185;
  static const int CURLOPT_MAIL_FROM = 10186;
  static const int CURLOPT_MAIL_RCPT = 10187;
  static const int CURLOPT_FTP_USE_PRET = 188;
  static const int CURLOPT_RTSP_REQUEST = 189;
  static const int CURLOPT_RTSP_SESSION_ID = 10190;
  static const int CURLOPT_RTSP_STREAM_URI = 10191;
  static const int CURLOPT_RTSP_TRANSPORT = 10192;
  static const int CURLOPT_RTSP_CLIENT_CSEQ = 193;
  static const int CURLOPT_RTSP_SERVER_CSEQ = 194;
  static const int CURLOPT_INTERLEAVEDATA = 10195;
  static const int CURLOPT_INTERLEAVEFUNCTION = 20196;
  static const int CURLOPT_WILDCARDMATCH = 197;
  static const int CURLOPT_CHUNK_BGN_FUNCTION = 20198;
  static const int CURLOPT_CHUNK_END_FUNCTION = 20199;
  static const int CURLOPT_FNMATCH_FUNCTION = 20200;
  static const int CURLOPT_CHUNK_DATA = 10201;
  static const int CURLOPT_FNMATCH_DATA = 10202;
  static const int CURLOPT_RESOLVE = 10203;
  static const int CURLOPT_TLSAUTH_USERNAME = 10204;
  static const int CURLOPT_TLSAUTH_PASSWORD = 10205;
  static const int CURLOPT_TLSAUTH_TYPE = 10206;
  static const int CURLOPT_TRANSFER_ENCODING = 207;
  static const int CURLOPT_CLOSESOCKETFUNCTION = 20208;
  static const int CURLOPT_CLOSESOCKETDATA = 10209;
  static const int CURLOPT_GSSAPI_DELEGATION = 210;
  static const int CURLOPT_DNS_SERVERS = 10211;
  static const int CURLOPT_ACCEPTTIMEOUT_MS = 212;
  static const int CURLOPT_TCP_KEEPALIVE = 213;
  static const int CURLOPT_TCP_KEEPIDLE = 214;
  static const int CURLOPT_TCP_KEEPINTVL = 215;
  static const int CURLOPT_SSL_OPTIONS = 216;
  static const int CURLOPT_MAIL_AUTH = 10217;
  static const int CURLOPT_SASL_IR = 218;
  static const int CURLOPT_XFERINFOFUNCTION = 20219;
  static const int CURLOPT_XOAUTH2_BEARER = 10220;
  static const int CURLOPT_DNS_INTERFACE = 10221;
  static const int CURLOPT_DNS_LOCAL_IP4 = 10222;
  static const int CURLOPT_DNS_LOCAL_IP6 = 10223;
  static const int CURLOPT_LOGIN_OPTIONS = 10224;
  static const int CURLOPT_SSL_ENABLE_NPN = 225;
  static const int CURLOPT_SSL_ENABLE_ALPN = 226;
  static const int CURLOPT_EXPECT_100_TIMEOUT_MS = 227;
  static const int CURLOPT_PROXYHEADER = 10228;
  static const int CURLOPT_HEADEROPT = 229;
  static const int CURLOPT_PINNEDPUBLICKEY = 10230;
  static const int CURLOPT_UNIX_SOCKET_PATH = 10231;
  static const int CURLOPT_SSL_VERIFYSTATUS = 232;
  static const int CURLOPT_SSL_FALSESTART = 233;
  static const int CURLOPT_PATH_AS_IS = 234;
  static const int CURLOPT_PROXY_SERVICE_NAME = 10235;
  static const int CURLOPT_SERVICE_NAME = 10236;
  static const int CURLOPT_PIPEWAIT = 237;
  static const int CURLOPT_DEFAULT_PROTOCOL = 10238;
  static const int CURLOPT_STREAM_WEIGHT = 239;
  static const int CURLOPT_STREAM_DEPENDS = 10240;
  static const int CURLOPT_STREAM_DEPENDS_E = 10241;
  static const int CURLOPT_TFTP_NO_OPTIONS = 242;
  static const int CURLOPT_CONNECT_TO = 10243;
  static const int CURLOPT_TCP_FASTOPEN = 244;
  static const int CURLOPT_KEEP_SENDING_ON_ERROR = 245;
  static const int CURLOPT_PROXY_CAINFO = 10246;
  static const int CURLOPT_PROXY_CAPATH = 10247;
  static const int CURLOPT_PROXY_SSL_VERIFYPEER = 248;
  static const int CURLOPT_PROXY_SSL_VERIFYHOST = 249;
  static const int CURLOPT_PROXY_SSLVERSION = 250;
  static const int CURLOPT_PROXY_TLSAUTH_USERNAME = 10251;
  static const int CURLOPT_PROXY_TLSAUTH_PASSWORD = 10252;
  static const int CURLOPT_PROXY_TLSAUTH_TYPE = 10253;
  static const int CURLOPT_PROXY_SSLCERT = 10254;
  static const int CURLOPT_PROXY_SSLCERTTYPE = 10255;
  static const int CURLOPT_PROXY_SSLKEY = 10256;
  static const int CURLOPT_PROXY_SSLKEYTYPE = 10257;
  static const int CURLOPT_PROXY_KEYPASSWD = 10258;
  static const int CURLOPT_PROXY_SSL_CIPHER_LIST = 10259;
  static const int CURLOPT_PROXY_CRLFILE = 10260;
  static const int CURLOPT_PROXY_SSL_OPTIONS = 261;
  static const int CURLOPT_PRE_PROXY = 10262;
  static const int CURLOPT_PROXY_PINNEDPUBLICKEY = 10263;
  static const int CURLOPT_ABSTRACT_UNIX_SOCKET = 10264;
  static const int CURLOPT_SUPPRESS_CONNECT_HEADERS = 265;
  static const int CURLOPT_REQUEST_TARGET = 10266;
  static const int CURLOPT_SOCKS5_AUTH = 267;
  static const int CURLOPT_SSH_COMPRESSION = 268;
  static const int CURLOPT_MIMEPOST = 10269;
  static const int CURLOPT_TIMEVALUE_LARGE = 30270;
  static const int CURLOPT_HAPPY_EYEBALLS_TIMEOUT_MS = 271;
  static const int CURLOPT_RESOLVER_START_FUNCTION = 20272;
  static const int CURLOPT_RESOLVER_START_DATA = 10273;
  static const int CURLOPT_HAPROXYPROTOCOL = 274;
  static const int CURLOPT_DNS_SHUFFLE_ADDRESSES = 275;
  static const int CURLOPT_TLS13_CIPHERS = 10276;
  static const int CURLOPT_PROXY_TLS13_CIPHERS = 10277;
  static const int CURLOPT_DISALLOW_USERNAME_IN_URL = 278;
  static const int CURLOPT_DOH_URL = 10279;
  static const int CURLOPT_UPLOAD_BUFFERSIZE = 280;
  static const int CURLOPT_UPKEEP_INTERVAL_MS = 281;
  static const int CURLOPT_CURLU = 10282;
  static const int CURLOPT_TRAILERFUNCTION = 20283;
  static const int CURLOPT_TRAILERDATA = 10284;
  static const int CURLOPT_HTTP09_ALLOWED = 285;
  static const int CURLOPT_ALTSVC_CTRL = 286;
  static const int CURLOPT_ALTSVC = 10287;
  static const int CURLOPT_MAXAGE_CONN = 288;
  static const int CURLOPT_SASL_AUTHZID = 10289;
  static const int CURLOPT_MAIL_RCPT_ALLLOWFAILS = 290;
  static const int CURLOPT_SSLCERT_BLOB = 40291;
  static const int CURLOPT_SSLKEY_BLOB = 40292;
  static const int CURLOPT_PROXY_SSLCERT_BLOB = 40293;
  static const int CURLOPT_PROXY_SSLKEY_BLOB = 40294;
  static const int CURLOPT_ISSUERCERT_BLOB = 40295;
  static const int CURLOPT_PROXY_ISSUERCERT = 10296;
  static const int CURLOPT_PROXY_ISSUERCERT_BLOB = 40297;
  static const int CURLOPT_SSL_EC_CURVES = 10298;
  static const int CURLOPT_HSTS_CTRL = 299;
  static const int CURLOPT_HSTS = 10300;
  static const int CURLOPT_HSTSREADFUNCTION = 20301;
  static const int CURLOPT_HSTSREADDATA = 10302;
  static const int CURLOPT_HSTSWRITEFUNCTION = 20303;
  static const int CURLOPT_HSTSWRITEDATA = 10304;
  static const int CURLOPT_AWS_SIGV4 = 10305;
  static const int CURLOPT_DOH_SSL_VERIFYPEER = 306;
  static const int CURLOPT_DOH_SSL_VERIFYHOST = 307;
  static const int CURLOPT_DOH_SSL_VERIFYSTATUS = 308;
  static const int CURLOPT_CAINFO_BLOB = 40309;
  static const int CURLOPT_PROXY_CAINFO_BLOB = 40310;
  static const int CURLOPT_SSH_HOST_PUBLIC_KEY_SHA256 = 10311;
  static const int CURLOPT_PREREQFUNCTION = 20312;
  static const int CURLOPT_PREREQDATA = 10313;
  static const int CURLOPT_MAXLIFETIME_CONN = 314;
  static const int CURLOPT_MIME_OPTIONS = 315;
  static const int CURLOPT_SSH_HOSTKEYFUNCTION = 20316;
  static const int CURLOPT_SSH_HOSTKEYDATA = 10317;
  static const int CURLOPT_PROTOCOLS_STR = 10318;
  static const int CURLOPT_REDIR_PROTOCOLS_STR = 10319;
  static const int CURLOPT_WS_OPTIONS = 320;
  static const int CURLOPT_CA_CACHE_TIMEOUT = 321;
  static const int CURLOPT_QUICK_EXIT = 322;
  static const int CURLOPT_LASTENTRY = 323;
}

abstract class CURL_NETRC_OPTION {
  static const int CURL_NETRC_IGNORED = 0;
  static const int CURL_NETRC_OPTIONAL = 1;
  static const int CURL_NETRC_REQUIRED = 2;
  static const int CURL_NETRC_LAST = 3;
}

abstract class CURL_TLSAUTH {
  static const int CURL_TLSAUTH_NONE = 0;
  static const int CURL_TLSAUTH_SRP = 1;
  static const int CURL_TLSAUTH_LAST = 2;
}

abstract class curl_TimeCond {
  static const int CURL_TIMECOND_NONE = 0;
  static const int CURL_TIMECOND_IFMODSINCE = 1;
  static const int CURL_TIMECOND_IFUNMODSINCE = 2;
  static const int CURL_TIMECOND_LASTMOD = 3;
  static const int CURL_TIMECOND_LAST = 4;
}

class curl_mime extends ffi.Opaque {}

class curl_mimepart extends ffi.Opaque {}

typedef CURL = ffi.Void;
typedef curl_read_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Size Function(
            ffi.Pointer<ffi.Char>, ffi.Size, ffi.Size, ffi.Pointer<ffi.Void>)>>;
typedef curl_seek_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, curl_off_t, ffi.Int)>>;
typedef curl_free_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

abstract class CURLformoption {
  /// the first one is unused
  static const int CURLFORM_NOTHING = 0;
  static const int CURLFORM_COPYNAME = 1;
  static const int CURLFORM_PTRNAME = 2;
  static const int CURLFORM_NAMELENGTH = 3;
  static const int CURLFORM_COPYCONTENTS = 4;
  static const int CURLFORM_PTRCONTENTS = 5;
  static const int CURLFORM_CONTENTSLENGTH = 6;
  static const int CURLFORM_FILECONTENT = 7;
  static const int CURLFORM_ARRAY = 8;
  static const int CURLFORM_OBSOLETE = 9;
  static const int CURLFORM_FILE = 10;
  static const int CURLFORM_BUFFER = 11;
  static const int CURLFORM_BUFFERPTR = 12;
  static const int CURLFORM_BUFFERLENGTH = 13;
  static const int CURLFORM_CONTENTTYPE = 14;
  static const int CURLFORM_CONTENTHEADER = 15;
  static const int CURLFORM_FILENAME = 16;
  static const int CURLFORM_END = 17;
  static const int CURLFORM_OBSOLETE2 = 18;
  static const int CURLFORM_STREAM = 19;
  static const int CURLFORM_CONTENTLEN = 20;
  static const int CURLFORM_LASTENTRY = 21;
}

class curl_forms extends ffi.Struct {
  @ffi.Int32()
  external int option;

  external ffi.Pointer<ffi.Char> value;
}

abstract class CURLFORMcode {
  static const int CURL_FORMADD_OK = 0;
  static const int CURL_FORMADD_MEMORY = 1;
  static const int CURL_FORMADD_OPTION_TWICE = 2;
  static const int CURL_FORMADD_NULL = 3;
  static const int CURL_FORMADD_UNKNOWN_OPTION = 4;
  static const int CURL_FORMADD_INCOMPLETE = 5;
  static const int CURL_FORMADD_ILLEGAL_ARRAY = 6;
  static const int CURL_FORMADD_DISABLED = 7;
  static const int CURL_FORMADD_LAST = 8;
}

typedef curl_formget_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Size Function(
            ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Size)>>;
typedef curl_malloc_callback
    = ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>;
typedef curl_realloc_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>>;
typedef curl_strdup_callback = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>;
typedef curl_calloc_callback = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>;

class curl_ssl_backend extends ffi.Struct {
  @ffi.Int32()
  external int id;

  external ffi.Pointer<ffi.Char> name;
}

abstract class CURLsslset {
  static const int CURLSSLSET_OK = 0;
  static const int CURLSSLSET_UNKNOWN_BACKEND = 1;
  static const int CURLSSLSET_TOO_LATE = 2;
  static const int CURLSSLSET_NO_BACKENDS = 3;
}

class curl_certinfo extends ffi.Struct {
  @ffi.Int()
  external int num_of_certs;

  external ffi.Pointer<ffi.Pointer<curl_slist>> certinfo;
}

class curl_tlssessioninfo extends ffi.Struct {
  @ffi.Int32()
  external int backend;

  external ffi.Pointer<ffi.Void> internals;
}

abstract class CURLINFO {
  static const int CURLINFO_NONE = 0;
  static const int CURLINFO_EFFECTIVE_URL = 1048577;
  static const int CURLINFO_RESPONSE_CODE = 2097154;
  static const int CURLINFO_TOTAL_TIME = 3145731;
  static const int CURLINFO_NAMELOOKUP_TIME = 3145732;
  static const int CURLINFO_CONNECT_TIME = 3145733;
  static const int CURLINFO_PRETRANSFER_TIME = 3145734;
  static const int CURLINFO_SIZE_UPLOAD = 3145735;
  static const int CURLINFO_SIZE_UPLOAD_T = 6291463;
  static const int CURLINFO_SIZE_DOWNLOAD = 3145736;
  static const int CURLINFO_SIZE_DOWNLOAD_T = 6291464;
  static const int CURLINFO_SPEED_DOWNLOAD = 3145737;
  static const int CURLINFO_SPEED_DOWNLOAD_T = 6291465;
  static const int CURLINFO_SPEED_UPLOAD = 3145738;
  static const int CURLINFO_SPEED_UPLOAD_T = 6291466;
  static const int CURLINFO_HEADER_SIZE = 2097163;
  static const int CURLINFO_REQUEST_SIZE = 2097164;
  static const int CURLINFO_SSL_VERIFYRESULT = 2097165;
  static const int CURLINFO_FILETIME = 2097166;
  static const int CURLINFO_FILETIME_T = 6291470;
  static const int CURLINFO_CONTENT_LENGTH_DOWNLOAD = 3145743;
  static const int CURLINFO_CONTENT_LENGTH_DOWNLOAD_T = 6291471;
  static const int CURLINFO_CONTENT_LENGTH_UPLOAD = 3145744;
  static const int CURLINFO_CONTENT_LENGTH_UPLOAD_T = 6291472;
  static const int CURLINFO_STARTTRANSFER_TIME = 3145745;
  static const int CURLINFO_CONTENT_TYPE = 1048594;
  static const int CURLINFO_REDIRECT_TIME = 3145747;
  static const int CURLINFO_REDIRECT_COUNT = 2097172;
  static const int CURLINFO_PRIVATE = 1048597;
  static const int CURLINFO_HTTP_CONNECTCODE = 2097174;
  static const int CURLINFO_HTTPAUTH_AVAIL = 2097175;
  static const int CURLINFO_PROXYAUTH_AVAIL = 2097176;
  static const int CURLINFO_OS_ERRNO = 2097177;
  static const int CURLINFO_NUM_CONNECTS = 2097178;
  static const int CURLINFO_SSL_ENGINES = 4194331;
  static const int CURLINFO_COOKIELIST = 4194332;
  static const int CURLINFO_LASTSOCKET = 2097181;
  static const int CURLINFO_FTP_ENTRY_PATH = 1048606;
  static const int CURLINFO_REDIRECT_URL = 1048607;
  static const int CURLINFO_PRIMARY_IP = 1048608;
  static const int CURLINFO_APPCONNECT_TIME = 3145761;
  static const int CURLINFO_CERTINFO = 4194338;
  static const int CURLINFO_CONDITION_UNMET = 2097187;
  static const int CURLINFO_RTSP_SESSION_ID = 1048612;
  static const int CURLINFO_RTSP_CLIENT_CSEQ = 2097189;
  static const int CURLINFO_RTSP_SERVER_CSEQ = 2097190;
  static const int CURLINFO_RTSP_CSEQ_RECV = 2097191;
  static const int CURLINFO_PRIMARY_PORT = 2097192;
  static const int CURLINFO_LOCAL_IP = 1048617;
  static const int CURLINFO_LOCAL_PORT = 2097194;
  static const int CURLINFO_TLS_SESSION = 4194347;
  static const int CURLINFO_ACTIVESOCKET = 5242924;
  static const int CURLINFO_TLS_SSL_PTR = 4194349;
  static const int CURLINFO_HTTP_VERSION = 2097198;
  static const int CURLINFO_PROXY_SSL_VERIFYRESULT = 2097199;
  static const int CURLINFO_PROTOCOL = 2097200;
  static const int CURLINFO_SCHEME = 1048625;
  static const int CURLINFO_TOTAL_TIME_T = 6291506;
  static const int CURLINFO_NAMELOOKUP_TIME_T = 6291507;
  static const int CURLINFO_CONNECT_TIME_T = 6291508;
  static const int CURLINFO_PRETRANSFER_TIME_T = 6291509;
  static const int CURLINFO_STARTTRANSFER_TIME_T = 6291510;
  static const int CURLINFO_REDIRECT_TIME_T = 6291511;
  static const int CURLINFO_APPCONNECT_TIME_T = 6291512;
  static const int CURLINFO_RETRY_AFTER = 6291513;
  static const int CURLINFO_EFFECTIVE_METHOD = 1048634;
  static const int CURLINFO_PROXY_ERROR = 2097211;
  static const int CURLINFO_REFERER = 1048636;
  static const int CURLINFO_CAINFO = 1048637;
  static const int CURLINFO_CAPATH = 1048638;
  static const int CURLINFO_LASTONE = 62;
}

abstract class curl_closepolicy {
  static const int CURLCLOSEPOLICY_NONE = 0;
  static const int CURLCLOSEPOLICY_OLDEST = 1;
  static const int CURLCLOSEPOLICY_LEAST_RECENTLY_USED = 2;
  static const int CURLCLOSEPOLICY_LEAST_TRAFFIC = 3;
  static const int CURLCLOSEPOLICY_SLOWEST = 4;
  static const int CURLCLOSEPOLICY_CALLBACK = 5;
  static const int CURLCLOSEPOLICY_LAST = 6;
}

/// Setup defines, protos etc for the sharing stuff.
abstract class curl_lock_data {
  static const int CURL_LOCK_DATA_NONE = 0;
  static const int CURL_LOCK_DATA_SHARE = 1;
  static const int CURL_LOCK_DATA_COOKIE = 2;
  static const int CURL_LOCK_DATA_DNS = 3;
  static const int CURL_LOCK_DATA_SSL_SESSION = 4;
  static const int CURL_LOCK_DATA_CONNECT = 5;
  static const int CURL_LOCK_DATA_PSL = 6;
  static const int CURL_LOCK_DATA_LAST = 7;
}

abstract class curl_lock_access {
  static const int CURL_LOCK_ACCESS_NONE = 0;
  static const int CURL_LOCK_ACCESS_SHARED = 1;
  static const int CURL_LOCK_ACCESS_SINGLE = 2;
  static const int CURL_LOCK_ACCESS_LAST = 3;
}

abstract class CURLSHcode {
  static const int CURLSHE_OK = 0;
  static const int CURLSHE_BAD_OPTION = 1;
  static const int CURLSHE_IN_USE = 2;
  static const int CURLSHE_INVALID = 3;
  static const int CURLSHE_NOMEM = 4;
  static const int CURLSHE_NOT_BUILT_IN = 5;
  static const int CURLSHE_LAST = 6;
}

abstract class CURLSHoption {
  static const int CURLSHOPT_NONE = 0;
  static const int CURLSHOPT_SHARE = 1;
  static const int CURLSHOPT_UNSHARE = 2;
  static const int CURLSHOPT_LOCKFUNC = 3;
  static const int CURLSHOPT_UNLOCKFUNC = 4;
  static const int CURLSHOPT_USERDATA = 5;
  static const int CURLSHOPT_LAST = 6;
}

typedef CURLSH = ffi.Void;

/// Structures for querying information about the curl library at runtime.
abstract class CURLversion {
  static const int CURLVERSION_FIRST = 0;
  static const int CURLVERSION_SECOND = 1;
  static const int CURLVERSION_THIRD = 2;
  static const int CURLVERSION_FOURTH = 3;
  static const int CURLVERSION_FIFTH = 4;
  static const int CURLVERSION_SIXTH = 5;
  static const int CURLVERSION_SEVENTH = 6;
  static const int CURLVERSION_EIGHTH = 7;
  static const int CURLVERSION_NINTH = 8;
  static const int CURLVERSION_TENTH = 9;
  static const int CURLVERSION_ELEVENTH = 10;
  static const int CURLVERSION_LAST = 11;
}

class curl_version_info_data extends ffi.Struct {
  @ffi.Int32()
  external int age;

  external ffi.Pointer<ffi.Char> version;

  @ffi.UnsignedInt()
  external int version_num;

  external ffi.Pointer<ffi.Char> host;

  @ffi.Int()
  external int features;

  external ffi.Pointer<ffi.Char> ssl_version;

  @ffi.Long()
  external int ssl_version_num;

  external ffi.Pointer<ffi.Char> libz_version;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> protocols;

  external ffi.Pointer<ffi.Char> ares;

  @ffi.Int()
  external int ares_num;

  external ffi.Pointer<ffi.Char> libidn;

  @ffi.Int()
  external int iconv_ver_num;

  external ffi.Pointer<ffi.Char> libssh_version;

  @ffi.UnsignedInt()
  external int brotli_ver_num;

  external ffi.Pointer<ffi.Char> brotli_version;

  @ffi.UnsignedInt()
  external int nghttp2_ver_num;

  external ffi.Pointer<ffi.Char> nghttp2_version;

  external ffi.Pointer<ffi.Char> quic_version;

  external ffi.Pointer<ffi.Char> cainfo;

  external ffi.Pointer<ffi.Char> capath;

  @ffi.UnsignedInt()
  external int zstd_ver_num;

  external ffi.Pointer<ffi.Char> zstd_version;

  external ffi.Pointer<ffi.Char> hyper_version;

  external ffi.Pointer<ffi.Char> gsasl_version;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> feature_names;
}

class curl_blob extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Size()
  external int len;

  @ffi.UnsignedInt()
  external int flags;
}

abstract class CURLMcode {
  static const int CURLM_CALL_MULTI_PERFORM = -1;
  static const int CURLM_OK = 0;
  static const int CURLM_BAD_HANDLE = 1;
  static const int CURLM_BAD_EASY_HANDLE = 2;
  static const int CURLM_OUT_OF_MEMORY = 3;
  static const int CURLM_INTERNAL_ERROR = 4;
  static const int CURLM_BAD_SOCKET = 5;
  static const int CURLM_UNKNOWN_OPTION = 6;
  static const int CURLM_ADDED_ALREADY = 7;
  static const int CURLM_RECURSIVE_API_CALL = 8;
  static const int CURLM_WAKEUP_FAILURE = 9;
  static const int CURLM_BAD_FUNCTION_ARGUMENT = 10;
  static const int CURLM_ABORTED_BY_CALLBACK = 11;
  static const int CURLM_UNRECOVERABLE_POLL = 12;
  static const int CURLM_LAST = 13;
}

abstract class CURLMSG {
  static const int CURLMSG_NONE = 0;
  static const int CURLMSG_DONE = 1;
  static const int CURLMSG_LAST = 2;
}

class CURLMsg extends ffi.Struct {
  @ffi.Int32()
  external int msg;

  external ffi.Pointer<CURL> easy_handle;

  external UnnamedUnion1 data;
}

class UnnamedUnion1 extends ffi.Union {
  external ffi.Pointer<ffi.Void> whatever;

  @ffi.Int32()
  external int result;
}

class curl_waitfd extends ffi.Struct {
  @curl_socket_t()
  external int fd;

  @ffi.Short()
  external int events;

  @ffi.Short()
  external int revents;
}

typedef curl_socket_t = ffi.Int;
typedef CURLM = ffi.Void;

class fd_set extends ffi.Struct {
  @ffi.Array.multi([32])
  external ffi.Array<__int32_t> fds_bits;
}

typedef __int32_t = ffi.Int;

abstract class CURLMoption {
  static const int CURLMOPT_SOCKETFUNCTION = 20001;
  static const int CURLMOPT_SOCKETDATA = 10002;
  static const int CURLMOPT_PIPELINING = 3;
  static const int CURLMOPT_TIMERFUNCTION = 20004;
  static const int CURLMOPT_TIMERDATA = 10005;
  static const int CURLMOPT_MAXCONNECTS = 6;
  static const int CURLMOPT_MAX_HOST_CONNECTIONS = 7;
  static const int CURLMOPT_MAX_PIPELINE_LENGTH = 8;
  static const int CURLMOPT_CONTENT_LENGTH_PENALTY_SIZE = 30009;
  static const int CURLMOPT_CHUNK_LENGTH_PENALTY_SIZE = 30010;
  static const int CURLMOPT_PIPELINING_SITE_BL = 10011;
  static const int CURLMOPT_PIPELINING_SERVER_BL = 10012;
  static const int CURLMOPT_MAX_TOTAL_CONNECTIONS = 13;
  static const int CURLMOPT_PUSHFUNCTION = 20014;
  static const int CURLMOPT_PUSHDATA = 10015;
  static const int CURLMOPT_MAX_CONCURRENT_STREAMS = 16;
  static const int CURLMOPT_LASTENTRY = 17;
}

class curl_pushheaders extends ffi.Opaque {}

abstract class CURLUcode {
  static const int CURLUE_OK = 0;
  static const int CURLUE_BAD_HANDLE = 1;
  static const int CURLUE_BAD_PARTPOINTER = 2;
  static const int CURLUE_MALFORMED_INPUT = 3;
  static const int CURLUE_BAD_PORT_NUMBER = 4;
  static const int CURLUE_UNSUPPORTED_SCHEME = 5;
  static const int CURLUE_URLDECODE = 6;
  static const int CURLUE_OUT_OF_MEMORY = 7;
  static const int CURLUE_USER_NOT_ALLOWED = 8;
  static const int CURLUE_UNKNOWN_PART = 9;
  static const int CURLUE_NO_SCHEME = 10;
  static const int CURLUE_NO_USER = 11;
  static const int CURLUE_NO_PASSWORD = 12;
  static const int CURLUE_NO_OPTIONS = 13;
  static const int CURLUE_NO_HOST = 14;
  static const int CURLUE_NO_PORT = 15;
  static const int CURLUE_NO_QUERY = 16;
  static const int CURLUE_NO_FRAGMENT = 17;
  static const int CURLUE_NO_ZONEID = 18;
  static const int CURLUE_BAD_FILE_URL = 19;
  static const int CURLUE_BAD_FRAGMENT = 20;
  static const int CURLUE_BAD_HOSTNAME = 21;
  static const int CURLUE_BAD_IPV6 = 22;
  static const int CURLUE_BAD_LOGIN = 23;
  static const int CURLUE_BAD_PASSWORD = 24;
  static const int CURLUE_BAD_PATH = 25;
  static const int CURLUE_BAD_QUERY = 26;
  static const int CURLUE_BAD_SCHEME = 27;
  static const int CURLUE_BAD_SLASHES = 28;
  static const int CURLUE_BAD_USER = 29;
  static const int CURLUE_LAST = 30;
}

abstract class CURLUPart {
  static const int CURLUPART_URL = 0;
  static const int CURLUPART_SCHEME = 1;
  static const int CURLUPART_USER = 2;
  static const int CURLUPART_PASSWORD = 3;
  static const int CURLUPART_OPTIONS = 4;
  static const int CURLUPART_HOST = 5;
  static const int CURLUPART_PORT = 6;
  static const int CURLUPART_PATH = 7;
  static const int CURLUPART_QUERY = 8;
  static const int CURLUPART_FRAGMENT = 9;
  static const int CURLUPART_ZONEID = 10;
}

typedef CURLU = Curl_URL;

class Curl_URL extends ffi.Opaque {}

abstract class curl_easytype {
  static const int CURLOT_LONG = 0;
  static const int CURLOT_VALUES = 1;
  static const int CURLOT_OFF_T = 2;
  static const int CURLOT_OBJECT = 3;
  static const int CURLOT_STRING = 4;
  static const int CURLOT_SLIST = 5;
  static const int CURLOT_CBPTR = 6;
  static const int CURLOT_BLOB = 7;
  static const int CURLOT_FUNCTION = 8;
}

class curl_easyoption extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Int32()
  external int id;

  @ffi.Int32()
  external int type;

  @ffi.UnsignedInt()
  external int flags;
}

class curl_header extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> value;

  @ffi.Size()
  external int amount;

  @ffi.Size()
  external int index;

  @ffi.UnsignedInt()
  external int origin;

  external ffi.Pointer<ffi.Void> anchor;
}

abstract class CURLHcode {
  static const int CURLHE_OK = 0;
  static const int CURLHE_BADINDEX = 1;
  static const int CURLHE_MISSING = 2;
  static const int CURLHE_NOHEADERS = 3;
  static const int CURLHE_NOREQUEST = 4;
  static const int CURLHE_OUT_OF_MEMORY = 5;
  static const int CURLHE_BAD_ARGUMENT = 6;
  static const int CURLHE_NOT_BUILT_IN = 7;
}

class curl_ws_frame extends ffi.Struct {
  @ffi.Int()
  external int age;

  @ffi.Int()
  external int flags;

  @curl_off_t()
  external int offset;

  @curl_off_t()
  external int bytesleft;
}

const int CURL_HTTP_VERSION_NONE = 0;

const int CURL_HTTP_VERSION_1_0 = 1;

const int CURL_HTTP_VERSION_1_1 = 2;

const int CURL_HTTP_VERSION_2_0 = 3;

const int CURL_HTTP_VERSION_2TLS = 4;

const int CURL_HTTP_VERSION_2_PRIOR_KNOWLEDGE = 5;

const int CURL_HTTP_VERSION_3 = 30;

const int CURL_HTTP_VERSION_LAST = 31;

const int CURL_RTSPREQ_NONE = 0;

const int CURL_RTSPREQ_OPTIONS = 1;

const int CURL_RTSPREQ_DESCRIBE = 2;

const int CURL_RTSPREQ_ANNOUNCE = 3;

const int CURL_RTSPREQ_SETUP = 4;

const int CURL_RTSPREQ_PLAY = 5;

const int CURL_RTSPREQ_PAUSE = 6;

const int CURL_RTSPREQ_TEARDOWN = 7;

const int CURL_RTSPREQ_GET_PARAMETER = 8;

const int CURL_RTSPREQ_SET_PARAMETER = 9;

const int CURL_RTSPREQ_RECORD = 10;

const int CURL_RTSPREQ_RECEIVE = 11;

const int CURL_RTSPREQ_LAST = 12;

const int CURL_SSLVERSION_DEFAULT = 0;

const int CURL_SSLVERSION_TLSv1 = 1;

const int CURL_SSLVERSION_SSLv2 = 2;

const int CURL_SSLVERSION_SSLv3 = 3;

const int CURL_SSLVERSION_TLSv1_0 = 4;

const int CURL_SSLVERSION_TLSv1_1 = 5;

const int CURL_SSLVERSION_TLSv1_2 = 6;

const int CURL_SSLVERSION_TLSv1_3 = 7;

const int CURL_SSLVERSION_LAST = 8;

const int CURL_SSLVERSION_MAX_NONE = 0;

const int CURL_SSLVERSION_MAX_DEFAULT = 65536;

const int CURL_SSLVERSION_MAX_TLSv1_0 = 262144;

const int CURL_SSLVERSION_MAX_TLSv1_1 = 327680;

const int CURL_SSLVERSION_MAX_TLSv1_2 = 393216;

const int CURL_SSLVERSION_MAX_TLSv1_3 = 458752;

const int CURL_SSLVERSION_MAX_LAST = 524288;

const String CURL_FORMAT_CURL_OFF_T = 'ld';

const String CURL_FORMAT_CURL_OFF_TU = 'lu';

const int CURL_PULL_SYS_TYPES_H = 1;

const int CURL_PULL_SYS_SOCKET_H = 1;

const int CURL_SOCKET_BAD = -1;

const int CURL_HTTPPOST_FILENAME = 1;

const int CURL_HTTPPOST_READFILE = 2;

const int CURL_HTTPPOST_PTRNAME = 4;

const int CURL_HTTPPOST_PTRCONTENTS = 8;

const int CURL_HTTPPOST_BUFFER = 16;

const int CURL_HTTPPOST_PTRBUFFER = 32;

const int CURL_HTTPPOST_CALLBACK = 64;

const int CURL_HTTPPOST_LARGE = 128;

const int CURL_PROGRESSFUNC_CONTINUE = 268435457;

const int CURL_MAX_READ_SIZE = 524288;

const int CURL_MAX_WRITE_SIZE = 16384;

const int CURL_MAX_HTTP_HEADER = 102400;

const int CURL_WRITEFUNC_PAUSE = 268435457;

const int CURL_WRITEFUNC_ERROR = 4294967295;

const int CURLFINFOFLAG_KNOWN_FILENAME = 1;

const int CURLFINFOFLAG_KNOWN_FILETYPE = 2;

const int CURLFINFOFLAG_KNOWN_TIME = 4;

const int CURLFINFOFLAG_KNOWN_PERM = 8;

const int CURLFINFOFLAG_KNOWN_UID = 16;

const int CURLFINFOFLAG_KNOWN_GID = 32;

const int CURLFINFOFLAG_KNOWN_SIZE = 64;

const int CURLFINFOFLAG_KNOWN_HLINKCOUNT = 128;

const int CURL_CHUNK_BGN_FUNC_OK = 0;

const int CURL_CHUNK_BGN_FUNC_FAIL = 1;

const int CURL_CHUNK_BGN_FUNC_SKIP = 2;

const int CURL_CHUNK_END_FUNC_OK = 0;

const int CURL_CHUNK_END_FUNC_FAIL = 1;

const int CURL_FNMATCHFUNC_MATCH = 0;

const int CURL_FNMATCHFUNC_NOMATCH = 1;

const int CURL_FNMATCHFUNC_FAIL = 2;

const int CURL_SEEKFUNC_OK = 0;

const int CURL_SEEKFUNC_FAIL = 1;

const int CURL_SEEKFUNC_CANTSEEK = 2;

const int CURL_READFUNC_ABORT = 268435456;

const int CURL_READFUNC_PAUSE = 268435457;

const int CURL_TRAILERFUNC_OK = 0;

const int CURL_TRAILERFUNC_ABORT = 1;

const int CURL_SOCKOPT_OK = 0;

const int CURL_SOCKOPT_ERROR = 1;

const int CURL_SOCKOPT_ALREADY_CONNECTED = 2;

const int CURL_PREREQFUNC_OK = 0;

const int CURL_PREREQFUNC_ABORT = 1;

const int CURLE_ALREADY_COMPLETE = 99999;

const int CURLAUTH_NONE = 0;

const int CURLAUTH_BASIC = 1;

const int CURLAUTH_DIGEST = 2;

const int CURLAUTH_NEGOTIATE = 4;

const int CURLAUTH_GSSNEGOTIATE = 4;

const int CURLAUTH_GSSAPI = 4;

const int CURLAUTH_NTLM = 8;

const int CURLAUTH_DIGEST_IE = 16;

const int CURLAUTH_NTLM_WB = 32;

const int CURLAUTH_BEARER = 64;

const int CURLAUTH_AWS_SIGV4 = 128;

const int CURLAUTH_ONLY = 2147483648;

const int CURLAUTH_ANY = -17;

const int CURLAUTH_ANYSAFE = -18;

const int CURLSSH_AUTH_ANY = -1;

const int CURLSSH_AUTH_NONE = 0;

const int CURLSSH_AUTH_PUBLICKEY = 1;

const int CURLSSH_AUTH_PASSWORD = 2;

const int CURLSSH_AUTH_HOST = 4;

const int CURLSSH_AUTH_KEYBOARD = 8;

const int CURLSSH_AUTH_AGENT = 16;

const int CURLSSH_AUTH_GSSAPI = 32;

const int CURLSSH_AUTH_DEFAULT = -1;

const int CURLGSSAPI_DELEGATION_NONE = 0;

const int CURLGSSAPI_DELEGATION_POLICY_FLAG = 1;

const int CURLGSSAPI_DELEGATION_FLAG = 2;

const int CURL_ERROR_SIZE = 256;

const int CURLSSLOPT_ALLOW_BEAST = 1;

const int CURLSSLOPT_NO_REVOKE = 2;

const int CURLSSLOPT_NO_PARTIALCHAIN = 4;

const int CURLSSLOPT_REVOKE_BEST_EFFORT = 8;

const int CURLSSLOPT_NATIVE_CA = 16;

const int CURLSSLOPT_AUTO_CLIENT_CERT = 32;

const int CURL_HET_DEFAULT = 200;

const int CURL_UPKEEP_INTERVAL_DEFAULT = 60000;

const int CURLHEADER_UNIFIED = 0;

const int CURLHEADER_SEPARATE = 1;

const int CURLALTSVC_READONLYFILE = 4;

const int CURLALTSVC_H1 = 8;

const int CURLALTSVC_H2 = 16;

const int CURLALTSVC_H3 = 32;

const int CURLHSTS_ENABLE = 1;

const int CURLHSTS_READONLYFILE = 2;

const int CURLPROTO_HTTP = 1;

const int CURLPROTO_HTTPS = 2;

const int CURLPROTO_FTP = 4;

const int CURLPROTO_FTPS = 8;

const int CURLPROTO_SCP = 16;

const int CURLPROTO_SFTP = 32;

const int CURLPROTO_TELNET = 64;

const int CURLPROTO_LDAP = 128;

const int CURLPROTO_LDAPS = 256;

const int CURLPROTO_DICT = 512;

const int CURLPROTO_FILE = 1024;

const int CURLPROTO_TFTP = 2048;

const int CURLPROTO_IMAP = 4096;

const int CURLPROTO_IMAPS = 8192;

const int CURLPROTO_POP3 = 16384;

const int CURLPROTO_POP3S = 32768;

const int CURLPROTO_SMTP = 65536;

const int CURLPROTO_SMTPS = 131072;

const int CURLPROTO_RTSP = 262144;

const int CURLPROTO_RTMP = 524288;

const int CURLPROTO_RTMPT = 1048576;

const int CURLPROTO_RTMPE = 2097152;

const int CURLPROTO_RTMPTE = 4194304;

const int CURLPROTO_RTMPS = 8388608;

const int CURLPROTO_RTMPTS = 16777216;

const int CURLPROTO_GOPHER = 33554432;

const int CURLPROTO_SMB = 67108864;

const int CURLPROTO_SMBS = 134217728;

const int CURLPROTO_MQTT = 268435456;

const int CURLPROTO_GOPHERS = 536870912;

const int CURLPROTO_ALL = -1;

const int CURLOPTTYPE_LONG = 0;

const int CURLOPTTYPE_OBJECTPOINT = 10000;

const int CURLOPTTYPE_FUNCTIONPOINT = 20000;

const int CURLOPTTYPE_OFF_T = 30000;

const int CURLOPTTYPE_BLOB = 40000;

const int CURLOPTTYPE_STRINGPOINT = 10000;

const int CURLOPTTYPE_SLISTPOINT = 10000;

const int CURLOPTTYPE_CBPOINT = 10000;

const int CURLOPTTYPE_VALUES = 0;

const int CURL_IPRESOLVE_WHATEVER = 0;

const int CURL_IPRESOLVE_V4 = 1;

const int CURL_IPRESOLVE_V6 = 2;

const int CURL_REDIR_GET_ALL = 0;

const int CURL_REDIR_POST_301 = 1;

const int CURL_REDIR_POST_302 = 2;

const int CURL_REDIR_POST_303 = 4;

const int CURL_REDIR_POST_ALL = 7;

const int CURLMIMEOPT_FORMESCAPE = 1;

const int CURLINFO_STRING = 1048576;

const int CURLINFO_LONG = 2097152;

const int CURLINFO_DOUBLE = 3145728;

const int CURLINFO_SLIST = 4194304;

const int CURLINFO_PTR = 4194304;

const int CURLINFO_SOCKET = 5242880;

const int CURLINFO_OFF_T = 6291456;

const int CURLINFO_MASK = 1048575;

const int CURLINFO_TYPEMASK = 15728640;

const int CURL_GLOBAL_SSL = 1;

const int CURL_GLOBAL_WIN32 = 2;

const int CURL_GLOBAL_ALL = 3;

const int CURL_GLOBAL_NOTHING = 0;

const int CURL_GLOBAL_DEFAULT = 3;

const int CURL_GLOBAL_ACK_EINTR = 4;

const int CURL_VERSION_IPV6 = 1;

const int CURL_VERSION_KERBEROS4 = 2;

const int CURL_VERSION_SSL = 4;

const int CURL_VERSION_LIBZ = 8;

const int CURL_VERSION_NTLM = 16;

const int CURL_VERSION_GSSNEGOTIATE = 32;

const int CURL_VERSION_DEBUG = 64;

const int CURL_VERSION_ASYNCHDNS = 128;

const int CURL_VERSION_SPNEGO = 256;

const int CURL_VERSION_LARGEFILE = 512;

const int CURL_VERSION_IDN = 1024;

const int CURL_VERSION_SSPI = 2048;

const int CURL_VERSION_CONV = 4096;

const int CURL_VERSION_CURLDEBUG = 8192;

const int CURL_VERSION_TLSAUTH_SRP = 16384;

const int CURL_VERSION_NTLM_WB = 32768;

const int CURL_VERSION_HTTP2 = 65536;

const int CURL_VERSION_GSSAPI = 131072;

const int CURL_VERSION_KERBEROS5 = 262144;

const int CURL_VERSION_UNIX_SOCKETS = 524288;

const int CURL_VERSION_PSL = 1048576;

const int CURL_VERSION_HTTPS_PROXY = 2097152;

const int CURL_VERSION_MULTI_SSL = 4194304;

const int CURL_VERSION_BROTLI = 8388608;

const int CURL_VERSION_ALTSVC = 16777216;

const int CURL_VERSION_HTTP3 = 33554432;

const int CURL_VERSION_ZSTD = 67108864;

const int CURL_VERSION_UNICODE = 134217728;

const int CURL_VERSION_HSTS = 268435456;

const int CURL_VERSION_GSASL = 536870912;

const int CURL_VERSION_THREADSAFE = 1073741824;

const int CURLPAUSE_RECV = 1;

const int CURLPAUSE_RECV_CONT = 0;

const int CURLPAUSE_SEND = 4;

const int CURLPAUSE_SEND_CONT = 0;

const int CURLPAUSE_ALL = 5;

const int CURLPAUSE_CONT = 0;

const int CURL_BLOB_COPY = 1;

const int CURL_BLOB_NOCOPY = 0;

const int CURLPIPE_NOTHING = 0;

const int CURLPIPE_HTTP1 = 1;

const int CURLPIPE_MULTIPLEX = 2;

const int CURL_WAIT_POLLIN = 1;

const int CURL_WAIT_POLLPRI = 2;

const int CURL_WAIT_POLLOUT = 4;

const int CURL_POLL_NONE = 0;

const int CURL_POLL_IN = 1;

const int CURL_POLL_OUT = 2;

const int CURL_POLL_INOUT = 3;

const int CURL_POLL_REMOVE = 4;

const int CURL_SOCKET_TIMEOUT = -1;

const int CURL_CSELECT_IN = 1;

const int CURL_CSELECT_OUT = 2;

const int CURL_CSELECT_ERR = 4;

const int CURL_PUSH_OK = 0;

const int CURL_PUSH_DENY = 1;

const int CURL_PUSH_ERROROUT = 2;

const int CURLU_DEFAULT_PORT = 1;

const int CURLU_NO_DEFAULT_PORT = 2;

const int CURLU_DEFAULT_SCHEME = 4;

const int CURLU_NON_SUPPORT_SCHEME = 8;

const int CURLU_PATH_AS_IS = 16;

const int CURLU_DISALLOW_USER = 32;

const int CURLU_URLDECODE = 64;

const int CURLU_URLENCODE = 128;

const int CURLU_APPENDQUERY = 256;

const int CURLU_GUESS_SCHEME = 512;

const int CURLU_NO_AUTHORITY = 1024;

const int CURLU_ALLOW_SPACE = 2048;

const int CURLOT_FLAG_ALIAS = 1;

const int CURLH_HEADER = 1;

const int CURLH_TRAILER = 2;

const int CURLH_CONNECT = 4;

const int CURLH_1XX = 8;

const int CURLH_PSEUDO = 16;

const int CURLWS_TEXT = 1;

const int CURLWS_BINARY = 2;

const int CURLWS_CONT = 4;

const int CURLWS_CLOSE = 8;

const int CURLWS_PING = 16;

const int CURLWS_OFFSET = 32;

const int CURLWS_PONG = 64;

const int CURLWS_RAW_MODE = 1;
